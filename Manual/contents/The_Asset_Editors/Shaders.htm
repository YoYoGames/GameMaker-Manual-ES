<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Sombreadores</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>El editor de <span class="notranslate">Shader</span> </h1>
  <p><img>Los sombreadores son una herramienta muy poderosa que puede utilizarse para manipular los gráficos que tu juego renderiza en la pantalla, permitiendo efectos increíblemente rápidos que pueden ir desde, por ejemplo, añadir un sutil tono de color a un <span class="notranslate">sprite</span>, hasta efectos de distorsión en toda la pantalla. Pero, ¿qué es un <span class="notranslate">shader</span>?</p>
  <p>Un <span class="notranslate">shader</span> es básicamente un programa de dos partes que se ejecuta directamente en la propia tarjeta gráfica, lo que lo hace muy rápido ya que la GPU está haciendo todo el trabajo y libera ciclos de CPU para el código de tu juego. El <span class="notranslate">shader</span> completo se compone de un programa <span class="notranslate">vertex</span> <span class="notranslate">shader</span>, y un programa de fragmentos <span class="notranslate">shader</span> (también conocido como píxel <span class="notranslate">shader</span>). Estos dos pequeños programas trabajan juntos para manipular lo que la tarjeta gráfica muestra en la pantalla. Esto le permite manipular en tiempo real, la posición, el color y los valores alfa que son realmente <a class="glossterm" data-glossterm="renderizado" href="#">representados</a> en el <a class="glossterm" data-glossterm="búfer de visualización" href="#">búfer de</a> la pantalla.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Sombreador de vértices</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">El <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> es la etapa programable <span class="notranslate">shader</span> en el pipeline de renderizado que maneja el procesamiento de los vértices individuales (los puntos de los triángulos usados para renderizar cualquier imagen), y cuando estás renderizando una geometría - como un <span class="notranslate">sprite</span> o una superficie
      - <span data-keyref="GameMaker Name">GameMaker</span> crea un flujo de vértices - llamado <strong>Vertex Buffer - </strong> que define la geometría de estos triángulos. Un <span class="notranslate">sprite</span> por ejemplo tendría una geometría de dos triángulos (normalmente llamados <em>polígonos</em>) renderizados
      juntos para formar un &quot;quad&quot;. Este flujo de <span class="notranslate">vertex</span> procedente de <span class="notranslate">Vertex</span> <span class="notranslate">Buffer</span> se introduce como entrada en <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span>, que puede procesar los datos de los vértices de forma programable. La salida de <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> es utilizada por la GPU para ensamblar triángulos,
      que luego se recortan y recortan adecuadamente para el puerto de vista y la cámara de vista, y luego se envían al bloque rasterizador de la GPU que genera un nuevo flujo de salida, constituido por algo llamado <strong>Fragmentos</strong>. Se trata de pequeñas estructuras de datos
      estructuras de datos, cada una de las cuales es relativa a un único píxel que aparece en la pantalla.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Sombreado de fragmentos</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">El fragmento <span class="notranslate">Shader</span> es la etapa programable de <span class="notranslate">shader</span> en el proceso de renderizado que se ocupa de los &quot;fragmentos&quot; - los píxeles interpolados utilizados para texturizar cualquier polígono - y son responsables de la salida del color final de cada píxel
      de cada píxel del triángulo renderizado. Básicamente funciona así: el fragmento <span class="notranslate">Shader</span> recibe como entrada todos aquellos fragmentos (los píxeles individuales del triángulo que se está renderizando) que han sido pasados a lo largo de la tubería por el <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span>. Entonces puede
      procesar estos fragmentos para cambiar el color y el alfa del píxel de destino final que se dibujará en la pantalla.</p>
  </div>
  <p> </p>
  <p>Una visión completa de cómo funciona realmente <span class="notranslate">shaders</span> y qué lugar ocupan en el proceso gráfico queda fuera del alcance de este artículo, pero puedes encontrar una breve guía aquí:</p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Guía para el uso de sombreadores</a></li>
  </ul>
  <p> </p>
  <h2>Apoyo lingüístico</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> es compatible con los siguientes idiomas <span class="notranslate">shader</span>:</p>
  <table>
    <tbody>
      <tr>
        <th>Lenguaje de sombreado</th>
        <th>Plataforma de destino</th>
      </tr>
      <tr>
        <td><strong>GLSL ES 1.0</strong></td>
        <td>Todas las plataformas de destino</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac y <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows, UWP, Xbox One y Series S/X</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>PlayStation 4 y 5</td>
      </tr>
    </tbody>
  </table>
  <p>Al escribir GLSL ES <span class="notranslate">shaders</span>, se recomienda seguir la <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf" title="GLSL ES 1.0 Specification">especificación oficial del lenguaje</a> lo más fielmente posible para evitar errores, ya que algunas plataformas de destino pueden ser más estrictas que otras (como los objetivos HTML5 y Opera GX, que pueden ser más restrictivos que otras plataformas como <span class="notranslate">Windows</span>, <span class="notranslate">macOS</span>, etc. en lo que respecta a las limitaciones del lenguaje).</p>
  <p> </p>
  <h2>Creación de un sombreado</h2>
  <p>Para crear un recurso <span class="notranslate">shader</span>, simplemente haga clic con el botón derecho del ratón en <img> dentro del <a href="../Introduction/The_Asset_Browser.htm">Navegador de Activos</a> y seleccione <em>Crear -&gt; Sombreado</em>. Una vez que haya creado la base <span class="notranslate">shader</span>, puede utilizar el menú del botón derecho del ratón <img> en el nuevo recurso para seleccionar el tipo <span class="notranslate">shader</span> antes de continuar editando el código:</p>
  <p><img>El propio editor de código se divide en dos &quot;programas&quot; - <span class="notranslate">Vertex</span> y Fragment - cuando se crea un nuevo <span class="notranslate">shader</span>, estando cada uno de ellos disponible desde las pestañas de la parte superior del editor. Ambos se crean a la vez porque <em>no se puede crear un <span class="notranslate">shader</span> sin ambas partes</em>. Incluso si sólo desea utilizar el fragmento <span class="notranslate">shader</span> tendrá que haber creado primero un &quot;paso a través&quot; de <span class="notranslate">vertex</span> <span class="notranslate">shader</span>, que es la razón por la que por defecto cualquier nuevo <span class="notranslate">shader</span> que se cree tendrá un <span class="notranslate">vertex</span> y un fragmento de paso a través de <span class="notranslate">shader</span> ya codificados para usted (en la captura de pantalla en la parte superior de la página, se puede ver que hemos utilizado la vista del panel del editor de código para mostrar los dos uno al lado del otro... útil cuando se trabaja en los dos programas <span class="notranslate">shader</span> juntos).</p>
  <p>Vale la pena señalar que puedes utilizar GLSL ES <span class="notranslate">shaders</span> en <em>todas las </em>plataformas de destino, pero para que funcionen en la plataforma de destino <strong>HTML5 </strong>debes haber habilitado WebGL en las <a href="../Settings/Game_Options/HTML5.htm">opciones de juego HTML5</a>, de lo contrario no funcionarán.</p>
  <p>Para más detalles sobre las funciones de <span class="notranslate">shader</span> y su uso en <span data-keyref="GameMaker Name">GameMaker</span>, consulte las siguientes páginas:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Funciones de sombreado</a> - La sección de referencia <span class="notranslate">GML</span> para <span class="notranslate">shaders</span>.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Constantes de sombreado</a> - Las constantes incorporadas a <span data-keyref="GameMaker Name">GameMaker</span> que se pueden utilizar al escribir <span class="notranslate">shaders</span>.</li>
    <li><a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">Especificaciones GLSL ES 1.0</a> - Archivo PDF para el lenguaje OpenGL ES 1.0 <span class="notranslate">Shader</span> que utiliza <span data-keyref="GameMaker Name">GameMaker</span>.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">Referencia del lenguaje HLSL</a> - Las páginas de referencia de Microsoft para utilizar HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">Presentación del</a> lenguaje PSSL - Visión general del lenguaje PSSL en formato de presentación.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="The_Asset_Editors.htm">Los editores de activos</a></div>
        <div style="float:right">Siguiente: <a href="Sounds.htm">Sonidos</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
The <span class="notranslate">Shader</span> Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>