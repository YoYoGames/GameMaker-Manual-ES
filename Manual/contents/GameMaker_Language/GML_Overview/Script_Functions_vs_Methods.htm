<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Funciones de script vs. Métodos</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Funciones de script vs. Métodos</h1>
  <p>Esta página cubre la información esencial sobre el uso de las funciones de <span class="notranslate">script</span> frente a los métodos.</p>
  <h2>Diferencia básica</h2>
  <p>Se crea una <a href="Script_Functions.htm">función de script</a> con esta sintaxis:</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>Con esta sintaxis se crea una <a href="Method_Variables.htm">variable de método</a>:</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>Deberías usar la primera sintaxis en <span class="notranslate">scripts</span>, para crear funciones globales que puedan ser llamadas desde cualquier ámbito en tu juego.</p>
  <p>Debe utilizar la segunda sintaxis cuando cree funciones en <a href="Structs.htm">structs/constructores</a> y <span class="notranslate">objects</span>. Esta sintaxis crea una variable que contiene un método.</p>
  <h2>Llamadas directas</h2>
  <p>Puede llamar tanto a las funciones como a los métodos de <span class="notranslate">script</span> directamente utilizando paréntesis <span class="inline2">()</span>, al igual que una <a href="Runtime_Functions.htm">función en tiempo de ejecución</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>También puede utilizar la función <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> para ejecutar una función de <span class="notranslate">script</span>, aunque ahora es una función heredada y no se recomienda su uso.</p>
  <h2>Llamadas indirectas: Métodos</h2>
  <p>Puedes almacenar una referencia a un método, en otra variable, para llamarlo después a través de esa variable diferente:</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">NOTA</span> Observa cómo el código no pone <span class="inline2">()</span> después de <span class="inline2">reset_alpha</span>. Eso es porque estamos leyendo la referencia del método y no lo llamamos.</p>
  <p>En este ejemplo, llamar a <span class="inline2">temp_1</span> llamará a <span class="inline2">reset_alpha</span>, ya que almacena una referencia a ese <strong>método</strong>.</p>
  <p>No hay ningún problema en pasar una referencia a un método de esta manera. Sin embargo, cuando se utilizan funciones de <span class="notranslate">script</span>, hay una advertencia.</p>
  <h2>Llamadas indirectas: <span class="notranslate">Script</span> Funciones</h2>
  <p>También puede almacenar una referencia a una función <span class="notranslate">script</span>, en otra variable:</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Ahora, puedes llamar a <span class="inline2">temp_1</span> haciendo esto:</p>
  <p class="code">temp_1();</p>
  <p>Sin embargo, como esta variable se refiere a una <strong>función de script</strong>, primero tiene que convertirla en un <strong>método</strong> y luego llamarla.</p>
  <p>Esto puede resultar fácilmente en un aumento del uso de la memoria, especialmente si lo llamas cada fotograma, porque el motor ahora tiene que crear un nuevo método cada fotograma para esta llamada. </p>
  <p>Entonces, ¿cuál es la solución?</p>
  <ul class="colour">
    <li>Utilice <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> para llamar a la función <span class="notranslate">script</span> a través de su referencia, que no creará un método.</li>
    <li>O, la mejor solución: convertir su función <span class="notranslate">script</span> <a href="../GML_Reference/Variable_Functions/method.htm">en un método</a> al pasar su referencia.</li>
  </ul>
  <p>Para implementar la segunda solución, su código sería el siguiente:</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>Se trata de crear un nuevo método a partir de la función de script <span class="inline2">reset_x</span>, utilizando <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Llamar a <span class="inline2">temp_1()</span> ahora usando paréntesis no incrementará el uso de memoria, ya que el método ya está creado para ti.</p>
  <p>De nuevo, esto sólo se aplica si se llama a una función de <span class="notranslate">script</span> <strong>indirectamente</strong>, a través de una referencia almacenada en una variable. Llamarla directamente no causa estos problemas.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Atrás: <a data-xref="{title}" href="GML_Overview.htm">Visión general del código GML</a></div>
        <div>Siguiente: <a data-xref="{title}" href="Functions/Static_Variables.htm">Variables estáticas</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>