<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Dirección de las variables en otras instancias</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Dirección de las variables en otras instancias</h1>
  <p>En las secciones dedicadas a <a href="Variables_And_Variable_Scope.htm">las variables</a> has visto cómo crear y utilizar variables dentro de una instancia, o en un ámbito global, pero ¿qué ocurre si quieres que una instancia acceda a una variable en otra instancia diferente? Hay muchos casos en los que puedes querer hacer esto, por ejemplo en una colisión con una bala <span class="notranslate">object</span>, puedes querer averiguar cuánto daño hace la bala accediendo a una variable en la bala, o puedes querer detener el movimiento de todas las bolas en un puzzle, o puedes querer mover al personaje principal a una posición particular, o cualquier número de otras situaciones que te encuentras típicamente en cualquier juego. Por suerte, el <span class="notranslate">GameMaker Language</span> viene equipado con mecanismos para conseguirlo.</p>
  <p>Uno de los métodos más comunes para acceder o cambiar una variable en <em>otra </em>instancia es usar su nombre <span class="notranslate">object</span> como identificador, y luego usar un punto &quot;<span class="inline">.</span>&quot; para decirle a <span data-keyref="GameMaker Name">GameMaker</span> que la variable a la que se hace referencia debe ser asignada o cambiada dentro de la instancia de ese objeto específico. Esto se conoce como &quot;notación de punto&quot;, y su sintaxis es la siguiente:</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>En la práctica sería así:</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>Con el código anterior está ajustando la velocidad de una instancia de &quot;<span class="inline">obj_ball</span>&quot;. Sin embargo, si tiene más de una instancia del <span class="notranslate">object</span> dado en el <span class="notranslate">room</span>, <em>entonces se aplicará a TODAS ellas por igual</em> - a menos que esté usando <b>HTML5</b>, en cuyo caso afectará sólo <em>a una</em>, pero no tiene forma de saber a cuál afectará - así que si necesita acceder a todas las instancias de un <span class="notranslate">object</span>, debería usar <a href="Language_Features/with.htm"><span class="inline">with()</span></a>ya que es 100% compatible con todas las plataformas. En general, este formato sólo debe utilizarse cuando se tiene una única instancia de <span class="notranslate">object</span> en el <span class="notranslate">room</span>, o (como se verá en la siguiente parte) cuando se tiene un <i> <b>ID de</b></i> instancia específico. </p>
  <p>También se puede acceder a una única instancia de un <span class="notranslate">object</span> cuando hay varias instancias dentro del <span class="notranslate">room</span> utilizando el nombre de <b>instancia</b> único para decirle a <span data-keyref="GameMaker Name">GameMaker</span> exactamente a qué instancia queremos dirigirnos. La <b>constante del</b> nombre de instancia es la constante de identificación única que se da a todas y cada una de las instancias añadidas a un <span class="notranslate">room</span> en su juego. Puedes encontrar esta constante haciendo doble clic en una instancia en el <a href="../../The_Asset_Editors/Rooms.htm">editor de salas</a>:</p>
  <p><img>Ten en cuenta que este nombre se puede editar y darle un nombre más descriptivo -aunque el nombre <em>debe</em> ser único para todo el juego- y se puede utilizar como el lado izquierdo del punto:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <p>Sin embargo, el método más común y práctico, con diferencia, es utilizar una <i>variable</i> a la izquierda del punto, siempre que la variable en cuestión<i> tenga almacenado un <b>id de instancia</b></i> válido. Los siguientes ejemplos lo ilustran.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if instance_exists(_inst)<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>En el código anterior del ejemplo 1, hay una llamada <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> en el bloque de código. Esto se debe a que el uso del método point para acceder o cambiar el valor de otra instancia dará un error y bloqueará el juego si la instancia no existe, y existe la posibilidad de que este sea el caso en ese ejemplo. Sin embargo, no necesitamos la comprobación en los Ejemplos 2 y 3 porque <i>sabemos</i> que la instancia está ahí ya que en el Ejemplo 2 la creamos, y en el Ejemplo 3, es la otra instancia en un evento de colisión. Sin embargo, si hay <i>alguna</i> posibilidad de que la instancia pueda ser destruida, desactivada o eliminada de alguna manera de la <span class="notranslate">room</span> mientras se utiliza este método, <i>siempre</i> se debe comprobar de antemano utilizando la función <span class="inline">instance_exists()</span> o la función <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> función.</p>
  <p>Tenga en cuenta que no puede utilizar la <a href="Instance_Keywords.htm">palabra clave</a> especial &quot;<span class="inline">all</span>&quot; con este método para apuntar a todas las instancias (por ejemplo: <span class="inline">all.val = 10</span> daría un error), pero <i>puede</i> utilizar las palabras clave &quot;<span class="inline">other</span>&quot; y &quot;<span class="inline">self</span>&quot; sin problemas. Por ejemplo, usando <span class="inline">other</span> en un <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">evento de colisión</a>:</p>
  <p class="code">// Example 3 other.hp -= 10;<br />
    if other.hp &lt;= 0<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p>
  <p>También es importante tener en cuenta que no se puede utilizar ninguna función por sí misma como lado izquierdo de una asignación. Por ejemplo, el siguiente código daría un error:</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>El valor de retorno de la expresión en ese ejemplo de código es un número entero (el valor de identificación único para la instancia más cercana) y por lo tanto debe ser encerrado entre paréntesis <span class="inline">()</span> para ser utilizado de esta manera y dirigir correctamente la instancia requerida. El código anterior se escribiría correctamente como</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var inst = instance_nearest(x, y, obj);<br />
    inst.speed = 0;
  </p>
  <p>Todas estas son formas perfectamente válidas de leer, cambiar y establecer variables en otras instancias, y funcionan porque el punto es en realidad un <i>operador</i>. Toma un valor como <a class="glossterm" data-glossterm="operando" href="#">operando de</a> la izquierda y una variable como operando de la derecha, y devuelve la dirección de esta variable en particular en el <span class="notranslate">object</span> o instancia indicada. Todos los nombres de <span class="notranslate">object</span>, constantes, IDs, etc... simplemente representan valores y estos pueden ser tratados como cualquier otro valor.</p>
  <p>La otra forma de referenciar variables en otra instancia es utilizar la función <span class="notranslate">GameMaker Language</span> <span class="inline">with()</span> , que se discute en detalle <a href="Language_Features/with.htm">aquí</a>:</p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if instance_exists(_enemy)<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="Expressions_And_Operators.htm">Expresiones y operadores</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>