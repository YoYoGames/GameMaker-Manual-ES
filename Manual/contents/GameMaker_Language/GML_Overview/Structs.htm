<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Estructuras y constructores</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Structs" />
  <meta name="rh-index-keywords" content="Structs" />
  <meta name="search-keywords" content="structs,new,delete,struct" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Estructuras y constructores</h1>
  <p>Una <strong>estructura </strong>es una variable que contiene una colección de otras variables. Las variables que contiene un <span class="notranslate">struct</span> pueden ser de cualquier <a href="Data_Types.htm">tipo de datos</a> mencionado anteriormente y estas variables se pueden leer y escribir después de la declaración inicial de <span class="notranslate">struct</span>, y también se pueden añadir más variables a un <span class="notranslate">struct</span> después de haberlo declarado.</p>
  <p>Las variables utilizadas en un <span class="notranslate">struct</span> deben seguir el esquema habitual de nomenclatura de variables, es decir: no pueden comenzar con un número y sólo deben estar formadas por caracteres alfanuméricos y el carácter de subrayado &quot;_&quot;, y también tenga en cuenta que el contenido de un <span class="notranslate">struct</span> es <em>independiente de la instancia o función que lo creó</em>, y como tal puede - si lo desea - utilizar nombres de variables incorporadas como <span class="inline">image_index</span> o <span class="inline">x</span> y <span class="inline">y</span>.</p>
  <p>Después de la creación inicial, <span class="notranslate">structs</span> no tiene ninguna sobrecarga de procesamiento mientras exista, <i>aunque</i> ocupará espacio en la memoria. La sintaxis de <span class="notranslate">struct</span> es la siguiente:</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br />
    {<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
        etc...<br />
    };
  </p>
  <p>Así, un ejemplo de esto en la práctica sería:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    };</p>
  <p>El código anterior crea un ámbito de instancia <span class="notranslate">struct</span> en la variable <span class="inline">mystruct</span> y lo rellena con algunos valores (<span class="notranslate">structs</span> puede crearse en ámbitos locales, de instancia y globales, como cualquier otra variable - ver la sección sobre <a href="Variables_And_Variable_Scope.htm">Variables y Ámbito de las Variables</a> para más información). Tenga en cuenta que no tiene que rellenar el contenido de un <span class="notranslate">struct</span> cuando se crea inicialmente y puede crear un <span class="notranslate">struct</span> vacío simplemente haciendo esto:</p>
  <p class="code">mystruct = {};</p>
  <p>Las variables pueden ser añadidas a este <span class="notranslate">struct</span> en un punto posterior del código del juego. Para añadirlas posteriormente se utiliza el operador punto (de la misma manera que en <a href="Addressing_Variables_In_Other_Instances.htm">Dirigir variables en otras instancias</a>): </p>
  <p class="code">mystruct.newItem = &quot;Some Text&quot;;</p>
  <p>Esto tiene el mismo resultado que inicializar el <span class="notranslate">struct</span> así: </p>
  <p class="code">mystruct =<br />
    {<br />
        newItem : &quot;Some Text&quot;<br />
    };</p>
  <p>Este es un ejemplo de <span class="notranslate">struct</span> con varias variables y tipos de datos:</p>
  <p class="code">var _xx = 100;<br />
    mystruct =<br />
    {<br />
        a : 10,<br />
        b : &quot;Hello World&quot;,<br />
        c : int64(5),<br />
        d : _xx + 50,<br />
        e : function(a, b)<br />
            {<br />
                return a + b;<br />
            },<br />
        f : [ 10, 20, 30, 40, 50 ],<br />
        g : image_index<br />
    };</p>
  <p>Notarás en el código anterior que también puedes definir métodos y usar funciones de <span class="notranslate">runtime</span> en <span class="notranslate">structs</span>, y también puedes usar variables locales y de instancia dentro de la declaración de <span class="notranslate">struct</span>.</p>
  <h3 id="inst_in_struct">¿Variables de instancia en la declaración de <span class="notranslate">Struct</span>?</h3>
  <p>Por ejemplo, notará en el ejemplo anterior que la variable &quot;g&quot; de <span class="notranslate">struct</span> se está estableciendo en <span class="inline">image_index</span>, que es una variable de instancia. Podrías pensar que tendrías que usar la <a href="Instance_Keywords.htm">palabra clave</a> <span class="inline">other</span> en este caso para obtener la variable de instancia, pero no es necesario. Esencialmente, cuando defines una estructura<strong>, todas las variables miembro a la izquierda de los dos puntos &quot;:&quot; son las variables de <em>la estructura</em></strong>, y los valores y variables a la derecha utilizan el ámbito de lo que está definiendo la estructura (en este caso, una instancia). </p>
  <p>Veamos un ejemplo sencillo para ilustrar esto. Digamos que quieres definir un <span class="notranslate">struct</span> con las variables &quot;x&quot; e &quot;y&quot; y quieres establecerlas a la &quot;x&quot; e &quot;y&quot; de la instancia que define el <span class="notranslate">struct</span>. En la práctica el código se vería así:</p>
  <p class="code">mystruct =<br />
    {<br />
        x : x,<br />
        y : y<br />
    };</p>
  <p>En el código anterior, las variables miembro de <span class="notranslate">struct</span> <span class="inline">x</span> y <span class="inline">y</span> se están estableciendo a los valores mantenidos en las variables de instancia <span class="inline">x</span> y <span class="inline">y</span>, ya que el lado derecho de los dos puntos &quot;:&quot; se refiere a la instancia que está definiendo el <span class="notranslate">struct</span>. Vale la pena señalar que esto significa que <em>no puede</em> utilizar las variables miembro de <span class="notranslate">struct</span> para definir las variables subsiguientes dentro de la declaración <span class="notranslate">struct</span>. Por ejemplo, lo siguiente daría un error:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 10,<br />
        b : 10,<br />
        c : a + b<br />
    }</p>
  <p>El error se produce porque las variables <span class="inline">a</span> y <span class="inline">b</span> están siendo evaluadas en el ámbito de lo que define <span class="notranslate">struct</span> (están a la derecha de los dos puntos &quot;:&quot;), y <em>no</em> son las que se definen dentro de la propia <span class="notranslate">struct</span>.<strong></strong></p>
  <h3 style="padding-left: 20px"><em><strong style="margin-left: 0px">¡IMPORTANTE!</strong></em> <strong>No puede </strong>utilizar ninguna variable de <em><strong>global </strong></em>como nombre de miembro de <span class="notranslate">struct</span>, por ejemplo: <span class="inline">game_id</span> o <span class="inline">fps</span>. Puede encontrar una lista completa de estas variables globales en la siguiente página:</h3>
  <ul class="colour">
    <li><a href="Struct_Forbidden_Variables.htm">Variables prohibidas de la estructura</a></li>
  </ul>
  <p>Una vez que se ha definido un <span class="notranslate">struct</span>, se puede acceder a los datos que contiene utilizando la notación &quot;punto&quot;, así:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    }<br />
    <br />
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>También puede realizar operaciones con las variables dentro de un <span class="notranslate">struct</span> o utilizarlas en funciones, como lo haría con cualquier otra variable. Por ejemplo:</p>
  <p class="code">mystruct.a += 1;<br />
    mystruct.b = mystruct.a + 20;<br />
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>Por último, <span class="notranslate">structs</span> puede tener otros <span class="notranslate">structs</span> anidados dentro de ellos, así:</p>
  <p class="code">mystruct =<br />
    {<br />
        a :<br />
        {<br />
            aa : &quot;This is an example&quot;<br />
        },<br />
        b :<br />
        {<br />
            bb : &quot;And another one&quot;<br />
        },<br />
    };</p>
  <p>Para acceder a este tipo de <span class="notranslate">structs</span> anidada, se seguiría utilizando la notación de puntos, así:</p>
  <p class="code">var _str = mystuct.a.aa + &quot; &quot; + mystruct.b.bb;<br />
    show_debug_message(_str);</p>
  <p>Otra forma de acceder a los datos en un <span class="notranslate">struct</span> es utilizando la función <a href="Language_Features/with.htm"><span class="inline">with()</span></a> función. Así, por ejemplo, podrías hacer esto:</p>
  <p class="code">with(mystruct)<br />
    {<br />
        a += other.x;<br />
    }</p>
  <p>El uso de <span class="inline">with()</span> cambia el ámbito del código a la <span class="notranslate">struct</span> dada, donde se pueden manipular las variables miembro en el ámbito de la estructura. Observe que en el ejemplo también utilizamos la <a href="Instance_Keywords.htm">palabra clave<span class="inline">other</span> </a>. Esto funciona igual que en una instancia cuando se utiliza <span class="inline">with()</span> y hará referencia a la instancia (o <span class="notranslate">struct</span>) que realmente está ejecutando el bloque de código.</p>
  <p>Cuando un <span class="notranslate">struct</span> ya no es necesario, puede eliminarse de la memoria mediante el operador <a href="Language_Features/delete.htm"><span class="inline">delete</span></a> que es <span class="notranslate">flags</span> y que permite la recogida de basura de <span class="notranslate">struct</span>. Esto no es estrictamente necesario, ya que el recolector de <a class="glossterm" data-glossterm="recolector de basura" href="#">basura</a> puede hacerlo automáticamente si el <span class="notranslate">struct</span> ya no es referenciado en su código, pero es una buena práctica hacerlo y lo recomendamos (por ejemplo, llame a <span class="inline">delete</span> en el <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">evento</a> de limpieza de una instancia para decirle explícitamente al recolector de basura que un ámbito de instancia <span class="notranslate">struct</span> debe ser eliminado). He aquí un ejemplo:</p>
  <p class="code">// Create event<br />
    mystruct =<br />
    {<br />
        pos_x : x,<br />
        pos_y : y,<br />
        count : 1000<br />
    };<br />
    <br />
    // Clean Up event<br />
    delete mystruct;
  </p>
  <h2 id="constr">Funciones del constructor</h2>
  <p>También puede utilizar <a href="Script_Functions.htm">funciones</a> o <a href="Method_Variables.htm">métodos</a> de <a href="Script_Functions.htm">script</a> para crear funciones que puedan utilizarse para generar nuevos <span class="notranslate">structs</span>, lo que requiere el uso de la palabra clave <span class="inline">constructor</span> para la función y el operador <a href="Language_Features/new.htm"><span class="inline">new</span></a> al crear un <span class="notranslate">struct</span> a partir de dicha función. Véase la siguiente función:</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>O bien, utilizando la sintaxis de la variable de método:</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Aquí estamos creando una función llamada <span class="inline">Vector2</span> y diciéndole a <span data-keyref="GameMaker Name">GameMaker</span> que es una función usada para crear structs añadiendo la palabra clave <span class="inline">constructor</span> después de su definición. A continuación, puede llamar a esta función constructora así:</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>La variable <span class="inline">v2</span> contendrá ahora un <span class="notranslate">struct</span> con las variables <span class="inline">x</span> y <span class="inline">y</span> y la <a href="Functions/Static_Variables.htm"><span class="notranslate">static</span></a> variable de <a href="Method_Variables.htm">método</a> <span class="inline">Add</span>.</p>
  <p>También puede hacer uso de argumentos opcionales en sus funciones constructoras:</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    }</p>
  <p>Este constructor utilizará ahora <span class="inline">0</span> para los argumentos <span class="inline">_x</span> y <span class="inline">_y</span> si no se especifican cuando se llama a la función. Esto significa que puede crear un nuevo <span class="inline">Vector2</span> <span class="notranslate">struct</span> sin tener que especificar ningún argumento:</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>Herencia</h2>
  <p>Las funciones creadas de esta manera también soportarán la <b>herencia</b> simple, es decir: puedes crear una función constructora que <span class="notranslate">inherits</span> datos de otra función constructora.</p>
  <p class="note"><strong>NOTA</strong>: Cuando se trabaja con herencia, no se pueden utilizar variables de método para definir la función del constructor, sólo las funciones de <span class="notranslate">script</span>.</p>
  <p>Por ejemplo, hemos creado la función constructora <span class="inline">Vector2</span> anteriormente, por lo que podemos utilizarla como &quot;padre&quot; de otra función constructora, que llamaremos <span class="inline">Vector3</span>:</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br />
    {<br />
        z = _z;<br />
    <br />
        static Add = function( _vec3 )<br />
        {<br />
            x += _vec3.x;<br />
            y += _vec3.y;<br />
            z += _vec3.z;<br />
        }<br />
    }
  </p>
  <p>Como puedes ver, al definir la función utilizamos dos puntos &quot;<span class="inline">:</span>&quot; para separar el nuevo constructor del constructor padre del que se hereda. El constructor hijo (<span class="inline">Vector3</span>) pasa los argumentos <span class="inline">_x</span> y <span class="inline">_y</span> al constructor padre (<span class="inline">Vector2</span>), que se utilizan para ejecutar primero el constructor padre, tras lo cual se ejecuta el constructor hijo. De este modo, el constructor hijo obtiene las variables del padre (<span class="inline">x</span> y <span class="inline">y</span>) y también puede definir las suyas propias (<span class="inline">z</span>).</p>
  <p>También puedes pasar valores constantes al constructor padre, de forma que un determinado constructor hijo siempre proporcione los mismos valores a su constructor padre:</p>
  <p class="code">function Item(damage) constructor<br />
    {<br />
        my_damage = damage;<br />
    }<br />
    <br />
    function BasicSword() : Item(10) constructor<br />
    {}<br />
    <br />
    var _basic_sword = new BasicSword();<br />
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>Esto significa que el daño de una espada básica siempre será <span class="inline">10</span>, ya que pasa ese valor a su constructor padre independientemente de cuáles sean sus propios argumentos.</p>
  <p>Tenga en cuenta que la asignación de un valor por defecto a un argumento en un constructor hijo anulará el valor por defecto del padre para ese argumento. Véase el siguiente ejemplo:</p>
  <p class="code">function Parent(value = 10) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    function Child(value = 20) : Parent(value) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Ambos constructores imprimirán <span class="inline">20</span> en el registro de salida, ya que ese era el valor por defecto del argumento establecido por el constructor hijo, y el mismo valor fue pasado al constructor padre.</p>
  <p>Para más detalles sobre los operadores <span class="inline">new</span> y <span class="inline">delete</span>, consulte las siguientes páginas:</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span> </li>
  </ul>
  <h2>Salida de cadenas</h2>
  <p>Una última cosa a mencionar sobre <span class="notranslate">structs</span> es que puede cambiar lo que se envía a la consola desde ellos para <span class="notranslate">debugging</span>. Por defecto, al llamar a la función <a href="../GML_Reference/Debugging/show_debug_overlay.htm"><span class="inline">show_debug_message()</span></a> en un <span class="notranslate">struct</span> mostrará el contenido de <span class="notranslate">struct</span> (como se muestra arriba). Sin embargo, es posible personalizar este mensaje añadiendo un método de nombre específico a <span class="notranslate">struct</span> llamado <span class="inline">toString</span>:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;,<br />
    <br />
        toString : function()<br />
        {<br />
            return &quot;This struct says &quot; + b + &quot;, &quot; + string(a) + &quot; times!&quot;;<br />
        }<br />
    }<br />
    show_debug_message(mystruct);
  </p>
  <p>Ahora, cuando se llame a la función <span class="inline">show_debug_message()</span>, se utilizará el método <span class="inline">toString</span> para generar la salida y -con el ejemplo anterior- se obtendrá:</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>Tenga en cuenta que también puede llamar a la función <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a> en una referencia <span class="notranslate">struct</span> y utilizarla para mostrar el contenido -o el método <span class="inline">toString</span> - en la pantalla, o guardarlo en un archivo, o lo que sea, por ejemplo:</p>
  <p class="code">var _str = string(mystruct);<br />
    draw_text(32, 32, _str);</p>
  <p>Por último, hay una serie de funciones de tiempo de ejecución que puede utilizar en <span class="notranslate">structs</span> para obtener las variables que contienen, así como algunas otras cosas. Puedes encontrarlas en la siguiente sección:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funciones variables</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="Commenting_Code.htm">Comentar el código</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->
</body>
</html>