<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else y operadores condicionales</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>if / else y operadores condicionales</h1>
  <p>Una característica fundamental de la mayoría de los lenguajes de programación es la posibilidad de formular una pregunta simple que dé una respuesta booleana <span class="inline">true</span> o <span class="inline">false</span>, y en <span class="notranslate">GML</span> esto se consigue utilizando la palabra clave <span class="inline">if</span>. Una condición simple de <span class="inline">if</span> toma una <a class="glossterm" data-glossterm="expresión" href="#">expresión</a> y realizará una o más<span class="glossextra">sentencias</span> si la expresión se resuelve como <span class="inline">true</span>, con la siguiente forma básica:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><br>
    Aquí está diciendo que si una expresión se resuelve como <span class="inline">true</span> entonces haga algo. Tenga en cuenta que la parte &quot;entonces&quot; de la condición está <em>implícita</em>, pero hay una palabra clave <span class="inline">then</span> que se puede utilizar (aunque casi siempre se omite), por lo que también puede crear condicionales como esta:</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Además de <span class="inline">if</span> y <span class="inline">then</span>, también puede utilizar la palabra clave <span class="inline">else</span> para hacer algo más si la expresión que se comprueba se evalúa como <span class="inline">false</span>. Esta forma &quot;<span class="inline">if... then... else...</span>&quot; tiene el siguiente aspecto:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>En este caso se evaluará la expresión, y si se evalúa como <span class="inline">false</span>, se ejecuta la sentencia posterior a <span class="inline">else</span>, en caso contrario se ejecuta la sentencia inicial (es <span class="inline">true</span>).</p>
  <p class="note"><span class="note">NOTA</span> En el lenguaje <span class="notranslate">GameMaker</span> cualquier valor que sea menor o igual a 0 se evaluará como <span class="inline">false</span>, mientras que cualquier valor que sea mayor que 0 se evaluará como <span class="inline">true</span>.</p>
  <p>Es un buen hábito poner siempre corchetes alrededor de las expresiones y llaves {} alrededor de las sentencias en el <span class="inline">if</span> (de lo contrario sólo se ejecutará la primera sentencia), y tomar una nueva línea en el bloque para cada sentencia, por ejemplo:</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>Tenga en cuenta que aunque esto es un poco más verboso, significa que no hay ambigüedad en el código y que compilará correctamente en todas las plataformas en todo momento. Sin embargo, el ejemplo inicial puede no hacerlo, como se explica en la sección de la página <a href="../Expressions_And_Operators.htm">Expresiones y operadores</a>.</p>
  <p class="note"><strong>NOTA</strong>: Cuando se comparan dos valores para ver si son iguales, se debe utilizar el operador &quot;<span class="inline">==</span>&quot;, y sólo utilizar el &quot;<span class="inline">=</span>&quot; para la asignación. Actualmente <span class="notranslate">GameMaker</span> los tratará como intercambiables, pero esto puede cambiar en el futuro y su código será más limpio y obvio al usar los operadores correctos para las comparaciones y asignaciones.</p>
  <p>Para dar un ejemplo adecuado del uso de <span class="inline">if</span>, considere el siguiente código que moverá una instancia hacia la posición <span class="inline">x=200</span> en el <span class="notranslate">room</span> cuando se coloque en el Evento Paso:</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <p>Tenga en cuenta que también puede realizar comprobaciones <i>compuestas</i> en un <span class="inline">if</span>, es decir, comprobar varios valores o expresiones en la misma sentencia. Estas comprobaciones pueden utilizar los distintos <a href="../Expressions_And_Operators.htm">operadores de combinación</a> (<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, y <span class="inline">^^</span> xor). Al hacer esto, <span data-keyref="GameMaker Name">GameMaker</span> evaluará cada una de ellas de una en una, y dependiendo de cómo se evalúen, el resto puede ser omitido. Por ejemplo:</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = room_speed;<br />
    }</p>
  <p>Aquí estamos comprobando utilizando el operador &quot;and&quot; de <span class="inline">&amp;&amp;</span>, por lo que se está comprobando si <em>ambas </em>condiciones de <span class="inline">if</span> se evalúan a <span class="inline">true</span>, y si la primera es <span class="inline">false</span> entonces la segunda ni siquiera se comprobará. A esto se le llama &quot;cortocircuitar&quot; el código, así que cuando se combinan expresiones para comprobar, hay que asegurarse de que la más &quot;barata&quot; para el rendimiento es siempre la primera para evitar evaluar las más caras si la primera se evalúa a <span class="inline">false</span>. De forma similar, si una condición puede ser evaluada como <span class="inline">true</span> o <span class="inline">false</span> en tiempo de compilación, entonces la condición completa será eliminada del código, por ejemplo, digamos que tienes una <a href="../Variables/Constants.htm">macro</a> <span class="inline">DEBUG_ON </span>para <span class="notranslate">debugging</span> y puede ser tanto <span class="inline">true</span> como <span class="inline">false</span> - cuando se establece como <span class="inline">false</span> entonces el siguiente bloque de código será eliminado del juego cuando se compile:</p>
  <p class="code">if DEBUG_ON == true<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <p>También puede realizar <b>operaciones condicionales</b> (también conocidas como operaciones <b>ternarias</b> ), que son esencialmente una forma &quot;abreviada&quot; de realizar una operación básica <span class="inline">if</span>. Su sintaxis es la siguiente:</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>El operador condicional &quot;<span class="inline">?</span>&quot; devolverá uno de los dos valores dados dependiendo de si la expresión de la condición se evalúa como <span class="inline">true</span> o <span class="inline">false</span>, por ejemplo:</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>El código anterior comprobará el valor de &quot;x&quot; con el valor de la mitad del ancho de <span class="notranslate">room</span> y entonces si es menor pondrá &quot;<span class="inline">temp_x</span>&quot; a 32 de lo contrario &quot;<span class="inline">temp_x</span>&quot; será <span class="notranslate">room</span> ancho - 32. Aquí hay algunos ejemplos más de uso:</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br />
    (--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p>También hay que tener en cuenta que se pueden anidar las operaciones condicionales, pero si se hace, cada operación deberá ir entre paréntesis, por ejemplo:</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a data-xref="{title}" href="../GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">Dirigirse a las variables en otras instancias</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>