<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>mientras que</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>mientras que</h1>
  <p>El <span class="notranslate">GameMaker Language</span> tiene una serie de formas en las que se pueden realizar <i>bucles</i>, una de las más importantes es el <span class="inline">while</span> <span class="notranslate">loop</span>. Esta función <span class="notranslate">loop</span> tiene la forma:</p>
  <p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Aquí tiene una <a class="glossterm" data-glossterm="declaración" href="#">sentencia</a> que se itera una y otra vez en función de los resultados de la evaluación de una <a class="glossterm" data-glossterm="expresión" href="#">expresión</a>, es decir: con un <span class="inline">while</span> <span class="notranslate">loop</span>, mientras la expresión se evalúe como <span class="inline">true</span>, la sentencia (que también puede ser un bloque de código de múltiples sentencias con corchetes <span class="inline">{}</span>) se ejecuta. A continuación puede encontrar un ejemplo de una forma típica de utilizar &quot;while&quot;:</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p>
  <p>El código anterior está comprobando una colisión entre la instancia que llama y una instancia de &quot;pared&quot;, y realizará múltiples <a class="glossterm" data-glossterm="iteración" href="#">iteraciones</a>mientras se produce una - moviendo la instancia a la izquierda un píxel - hasta que la instancia ya no esté en colisión.</p>
  <p><strong>¿Cuándo debe utilizar un <span class="inline">while</span> <span class="notranslate">loop</span>?</strong> Debe utilizarse cada vez que quiera repetir una o más sentencias, pero no sepa -o no le importe- cuántas veces tiene que repetirse, teniendo en cuenta que si la evaluación inicial es <span class="inline">false</span>, las sentencias pueden ni siquiera ejecutarse.</p>
  <p>¡Por favor, ten en cuenta que debes <strong>tener mucho cuidado con tus bucles de <span class="inline">while</span> </strong>! Puedes hacer fácilmente <i>un</i> <span class="notranslate">loops</span><i>infinito</i>, en cuyo caso tu juego se colgará y no reaccionará a ninguna entrada del usuario y necesitará ser cerrado a la fuerza. Por ejemplo:</p>
  <p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p>
  <p>Ahora, el código anterior puede funcionar bien, pero también puede causar un infinito <span class="notranslate">loop</span> si la instancia es incapaz de encontrar una posición vacía a la que moverse, y esto hará que el juego se cuelgue. Si te encuentras en una posición en la que este tipo de cosas es una posibilidad, entonces deberías usar un tipo diferente de <span class="notranslate">loop</span> que no sea de bloqueo, o usar una comprobación de variable adicional en la expresión (puedes usar múltiples expresiones junto con los<span class="glossextra">operadores</span> <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>, <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a> y <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a> para la comprobación):</p>
  <p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if _check &gt;= 100<br />
    {<br />
        // code failed, so deal with it<br />
    }</p>
  <p>Alternativamente, puede utilizar la sentencia <span class="inline"><a href="break.htm">break</a></span> para salir de la <span class="notranslate">loop</span>, por ejemplo, el siguiente código generará 100 números aleatorios y luego continuará, aunque la evaluación <span class="inline">while</span> <em>siempre</em> va a ser <span class="inline">true</span>:</p>
  <p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p>
  <p>También puede utilizar la declaración <a href="continue.htm"><span class="notranslate">continue</span></a> en un <span class="inline">while</span> <span class="notranslate">loop</span>. Al utilizarla, se terminará la iteración actual de <span class="notranslate">loop</span> y se reiniciará el bucle en una nueva iteración, por ejemplo:</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p>
  <p>Este código abrirá un archivo y leerá una línea del mismo en cada iteración de <span class="notranslate">loop</span> hasta llegar al final del contenido del archivo. Si la línea que se está leyendo es una <span class="notranslate">string</span> vacía, la iteración actual de <span class="notranslate">loop</span> se termina usando la sentencia <span class="inline">continue</span> y se iniciará una nueva iteración, de lo contrario la <span class="notranslate">string</span> se añade a un <a href="../Arrays.htm">array</a> y la posición del array se incrementa.</p>
  <p>Para ver más ejemplos de funciones de <span class="notranslate">loop</span>, consulte las secciones de <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>y <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">Siguiente: <a href="do___until.htm"><span class="notranslate">do / until</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>