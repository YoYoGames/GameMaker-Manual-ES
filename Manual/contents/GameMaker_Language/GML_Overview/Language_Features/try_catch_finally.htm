<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>try / catch / finally</h1>
  <p>Las sentencias <span class="inline">try</span>, <span class="inline">catch</span> y <span class="inline">finally</span> pueden ser utilizadas en tu juego para la comprobación de errores y te permiten probar bloques de código y controlar lo que ocurre si se produce alguna <a href="../../../Additional_Information/Errors/Runner_Errors.htm">excepción en tiempo de ejecución</a>. Usarlas evitará que la excepción termine el juego y muestre el mensaje de error estándar al usuario, pero esto significa que tendrás que manejar lo que suceda después en ese caso, como guardar los archivos de registro - por ejemplo - y terminar el juego con gracia (ten en cuenta que si decides no hacer nada, tu juego puede volverse inestable y no funcionar correctamente).</p>
  <p>En su forma más básica, la sintaxis de <span class="inline">try</span> es la siguiente:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Sin embargo, tener un <span class="inline">try</span> sin nada que realmente maneje las excepciones que el código pueda producir no será muy útil, así que normalmente lo emparejamos con un <span class="inline">catch</span>, con la siguiente sintaxis:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Lo que hace <span class="inline">catch</span> es permitir que se ejecute el código extra suministrado en el siguiente bloque cuando se ha capturado una excepción del anterior <span class="inline">try</span>. Si se trata de una excepción de <span class="notranslate">runtime</span>, la variable suministrada puede utilizarse para acceder a una <a href="../Structs.htm">estructura</a> que contendrá la siguiente información:</p>
  <p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p>
  <p>A continuación se muestra un sencillo ejemplo de uso:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p>
  <p>Puede ser que quieras ejecutar algún código independientemente de si se ha lanzado una excepción o no, y para ello puedes añadir un bloque <span class="inline">finally</span>. La sintaxis de <span class="inline">finally</span> es:</p>
  <p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p>
  <p>Cabe destacar que se puede tener cualquier combinación de estos juntos, es decir:</p>
  <ul class="colour">
    <li><span class="inline">try</span> / <span class="inline">finally</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li>
  </ul>
  <p>Tenga en cuenta que dentro del bloque <span class="inline">finally</span> <em>no puede </em>utilizar <a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a> o <a href="return.htm"><span class="inline">return</span></a> ya que no tienen ningún significado en este contexto y el compilador generará un error si se utilizan.</p>
  <p>Por último, también puede anidar varios <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> dentro de otros, por ejemplo:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p>
  <p>Vale la pena señalar que usted puede tomar el mensaje de error por defecto <span class="notranslate">GML</span> y utilizar su propio código controlador llamando a la función <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. Esta <a href="../Runtime_Functions.htm">función de tiempo de ejecución</a> le permite suministrar un código personalizado <a href="../Method_Variables.htm"><span class="notranslate">method</span></a> que se llamará cada vez que se produzcan excepciones no controladas en el juego.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">Siguiente: <a href="throw.htm"><span class="notranslate">throw</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>