<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables del método</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Method Variables" />
  <meta name="rh-index-keywords" content="Method Variables" />
  <meta name="search-keywords" content="Method Variables,methods,method" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variables del método</h1>
  <p>Una variable de método es esencialmente una variable a la que se le ha asignado una función, &quot;vinculando&quot; la función a una instancia y permitiéndote usar la variable para referirte a la función - de la misma manera que usas un <a href="Runtime_Functions.htm">nombre de función en tiempo de ejecución</a> para referirte a una función incorporada en <span class="notranslate">GML</span>. La variable utilizada puede ser de ámbito <em>local</em>, de <em>instancia</em> o <em>global</em> (ver <a href="Variables_And_Variable_Scope.htm">aquí</a> para más información sobre el ámbito de las variables).</p>
  <p>Vea también: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funciones de Script vs. Métodos</a></p>
  <h2>Creación de métodos</h2>
  <p>La sintaxis para crear una variable de método es la siguiente:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>o</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Para crear una función en <span class="notranslate">GML</span> Visual, utilice <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declarar una nueva función</a>. Activa su opción &quot;Temp&quot; para crear una variable de método (primera sintaxis mostrada arriba).</p>
  <p>En general, sin embargo, se utilizaría la <em>primera </em>forma para los métodos, y la segunda para definir funciones de <a href="Script_Functions.htm">script</a>, ya que la segunda forma también asignará un índice <span class="notranslate">script</span> al nombre de la función, mientras que la primera forma será un método &quot;verdadero&quot; (y requerirá el uso del prefijo <a href="Variables/Global_Variables.htm"><span class="notranslate">global</span></a> si se utiliza para definir una función de script).</p>
  <p class="note"><span class="note">NOTA</span> Puede comprobarlo utilizando ambos formularios en el proyecto y llamando a la función <span class="notranslate">runtime</span> <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> en cada uno de ellos. Uno será clasificado como &quot;número&quot; -ya que devuelve un ID de índice <span class="notranslate">script</span> - y el otro será clasificado como &quot;método&quot;.</p>
  <p>Por lo tanto, ten en cuenta que -en general- siempre nos referiremos a funciones que <em>no </em>han sido definidas con un índice <span class="notranslate">script</span> cuando hablemos de métodos y variables de métodos. </p>
  <p>A continuación puedes ver tres ejemplos sencillos de creación de una variable de método utilizando diferentes ámbitos:</p>
  <p class="code">// Local<br />
    var _debug = function(message)<br />
    {<br />
        show_debug_message(message);<br />
    }<br />
    <br />
    // Instance<br />
    do_maths = function(val1, val2, val3)<br />
    {<br />
        return (val1 * val2) - val3;<br />
    }<br />
    <br />
    // Global<br />
    global.pd = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        return point_distance(_x1, _y1, _x2, _y2);<br />
    }
  </p>
  <p>Observe que en el código anterior, los diversos parámetros que se dan como entradas para la función tienen todos nombres y estos nombres son los que deben usarse dentro de la función para referirse a las diferentes entradas. Observe también que puede utilizar la sentencia <span class="inline"><a href="Language_Features/return.htm">return</a></span> para devolver un valor de una función para utilizarlo en otra parte de su código, y que una función <em>sin</em> valor de retorno definido, devolverá <span class="inline">undefined</span>.por defecto.</p>
  <p class="note"><span class="note">NOTA</span> Mientras que la variable estará en el ámbito elegido, la función real estará vinculada al ámbito en el que se definió inicialmente. Por ejemplo, <a href="Script_Functions.htm">las funciones de script</a> son todas de ámbito global y &quot;no vinculadas&quot; (es decir, no están asociadas a ninguna instancia), pero si tienes una función <span class="notranslate">script</span> que crea otra función como una variable de método dentro de ella y luego llamas a esta función <span class="notranslate">script</span> desde una instancia, la función utilizada dentro de <span class="notranslate">script</span> <strong>estará vinculada a la variable de instancia como un método</strong>. En general, no es necesario pensar en esto, pero para operaciones más complejas con variables de método vale la pena tenerlo en cuenta. Esto también se aplica cuando se utilizan otras construcciones como <a href="Language_Features/with.htm"><span class="inline">with</span></a> - cuando se crea una variable de método dentro de un with, la función se vinculará a la instancia que esté actualmente en el ámbito.</p>
  <p>Una vez creada, la variable del método se puede utilizar igual que una función <span class="notranslate">runtime</span> o una función <span class="notranslate">script</span>, por ejemplo:</p>
  <p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        var _array;<br />
        _array[0] = point_distance(_x1, _y1, _x2, _y2);<br />
        _array[1] = point_direction(_x1, _y1, _x2, _y2);<br />
        return _array;<br />
    }<br />
    <br />
    vec = create_vec(x, y, mouse_x, mouse_y);
  </p>
  <p>Las variables creadas dentro de una función seguirán las mismas reglas que las normales y estarán en el ámbito de la palabra clave utilizada o del ámbito de la llamada a la función. En el ejemplo anterior, utilizamos <span class="inline">var</span> para que la variable del array esté en el ámbito <em>local </em>de la función. Si no hubiéramos utilizado la palabra clave, la variable se habría creado en el ámbito de la instancia que llamó a la función.</p>
  <p>Los métodos, al igual que las funciones de <span class="notranslate">script</span>, también pueden tomar argumentos opcionales que tienen valores por defecto para cuando no se pasan:</p>
  <p class="code">create_attachment = function(_attachment, <strong>_x = x</strong>, <strong>_y = y</strong>)<br />
    {<br />
        return instance_create_layer(_x, _y, layer, _attachment);<br />
    }</p>
  <p>La función anterior toma tres argumentos, siendo los dos últimos opcionales. Si no se pasan cuando se llama a la función, entonces se utilizarán las coordenadas de la instancia <span class="inline">x</span> y <span class="inline">y</span> por defecto.</p>
  <p>Tenga en cuenta que si un argumento no se pasa y no tiene un valor por defecto, entonces será igual a <span class="inline">undefined</span>.</p>
  <p>Los métodos también pueden hacer uso de variables estáticas, que mantienen sus valores a lo largo de cada llamada a la función. Por favor, <a href="Functions/Static_Variables.htm">lee esta página</a> para más información.</p>
  <p>A continuación enumeramos algunas funciones de ayuda asociadas a las variables del método:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/is_method.htm"><span class="notranslate">is_method</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method.htm"><span class="notranslate">method</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_self.htm"><span class="notranslate">method_get_self</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_index.htm"><span class="notranslate">method_get_index</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funciones de Script vs. Métodos</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
-->
  <!-- TAGS
method_variables
-->
</body>
</html>