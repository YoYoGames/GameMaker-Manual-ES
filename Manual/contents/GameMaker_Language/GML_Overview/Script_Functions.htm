<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Funciones y Variables del Script</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Funciones y Variables del Script</h1>
  <p>Los activos de script son esencialmente una colección de una o más funciones o variables definidas por el usuario que usted mismo escribe como fragmentos de código en el <a href="../../The_Asset_Editors/Scripts.htm">Editor de Script</a>. Las funciones que defina en un <span class="notranslate">script</span> pueden resolver expresiones, devolver valores o hacer cualquier otra cosa que permita el <span class="notranslate">GameMaker Language</span>, al igual que las <a href="Runtime_Functions.htm">funciones</a> incorporadas en <a href="Runtime_Functions.htm">tiempo de ejecución</a>.</p>
  <p>Las funciones de script deberían utilizarse generalmente si tienes un bloque de código que utilizas en más de un lugar o <span class="notranslate">object</span>, o cuando quieres que un bloque de código se utilice en varios <span class="notranslate">objects</span> de forma modular. El uso de <span class="notranslate">scripts</span> para definir funciones significa que puede cambiar la función sólo una vez cuando sea necesario y el cambio será &quot;recogido&quot; por cada <span class="notranslate">object</span> que tenga una llamada a la función.</p>
  <p>Los scripts también pueden ser muy útiles desde el punto de vista organizativo, ya que permiten crear grupos de funciones que pertenecen a una determinada categoría - por ejemplo, podrías tener varias funciones relacionadas con las colisiones entre instancias en tu juego, por lo que crearías un &quot;<span class="inline">Collision_Functions</span>&quot; <span class="notranslate">script</span> y almacenarías todas estas funciones juntas en él.</p>
  <p>Vea también: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funciones de Script vs. Métodos</a></p>
  <h2>Creación de funciones</h2>
  <p>Cuando se crea un <span class="notranslate">script</span> con funciones en él, las funciones deben crearse utilizando los siguientes formatos:</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>o:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Para crear una función en <span class="notranslate">GML</span> Visual, utilice <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declarar una nueva función</a>. Activa su opción &quot;Temp&quot; para crear una variable de método (segunda sintaxis mostrada arriba).</p>
  <p>En general, sin embargo, se usará la <em>primera </em>forma para las funciones de <span class="notranslate">script</span>, ya que definirá la función como específicamente una función de <span class="notranslate">script</span>, lo que significa que será de <a href="Variables_And_Variable_Scope.htm">alcance</a> <strong>global </strong>, se le asignará un <strong>índice de script</strong> y no requerirá el prefijo <span class="inline">global</span> para identificarla, ya que el compilador la reconocerá como una función de <span class="notranslate">script</span>.</p>
  <p>Si se utiliza la segunda forma, se generará una <a href="Method_Variables.htm">variable de método de</a> ámbito global y, como tal, <em>no </em>será reconocida como una función de <span class="notranslate">script</span> por <span class="notranslate">IDE</span> y requerirá el uso del prefijo <span class="inline">global</span> cuando se haga referencia a ella en el código.</p>
  <p class="note"><span class="note">NOTA</span> Puede comprobarlo utilizando ambas formas en un <span class="notranslate">script</span> y llamando después a la función de tiempo de ejecución <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> en cada una de ellas. Uno será clasificado como &quot;número&quot; -ya que devuelve un ID de índice <span class="notranslate">script</span> - y el otro será clasificado como &quot;método&quot;.</p>
  <h2>Parámetros/Argumentos</h2>
  <p>Puede definir sus propios parámetros/argumentos para una función, que estarán disponibles para la función como variables locales y pueden ser utilizados para cualquier propósito dentro de esa función:</p>
  <p class="code">function move(<strong>spd, dir</strong>)<br />
    {<br />
        speed = <strong>spd</strong>;<br />
        direction = <strong>dir</strong>;<br />
    }</p>
  <p>Esta función toma dos argumentos y aplica sus valores a las variables <span class="inline">speed</span> y <span class="inline">direction</span> de la instancia. Ahora se puede llamar como cualquier función de <span class="notranslate">runtime</span> y se le pueden pasar argumentos:</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br />
    <br />
    <strong>move(4, _mouse_dir);</strong>
  </p>
  <h2>Argumentos opcionales</h2>
  <p>Si no se da un argumento a una función, su valor será <span class="inline">undefined</span>. Puede utilizar esto para definir argumentos <em>opcionales</em>, y comprobar si un argumento se pasa o no comprobando si es igual a <span class="inline">undefined</span>. Sin embargo, también puede definir explícitamente un valor por defecto para un argumento que se utilizará en lugar de <span class="inline">undefined</span> cuando no se pase.</p>
  <p>Puede asignar ese valor por defecto a un parámetro utilizando el signo de igualdad (<span class="inline">=</span>), convirtiéndolo en una variable opcional:</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br />
    {<br />
        speed = spd;<br />
        direction = dir;<br />
    }</p>
  <p>Si no se pasa el argumento <span class="inline">dir</span> al llamar a la función anterior, su valor será por defecto <span class="inline">90</span>, moviendo la instancia en dirección ascendente.</p>
  <p class="note"><span class="tip">SUGERENCIA</span> Puede omitir los argumentos de las llamadas a las funciones y éstas pasarán por defecto a <span class="inline">undefined</span> (o al valor por defecto de ese argumento definido por la función).<br>
    <br>
    Por ejemplo, escribir <span class="inline">my_func(0,,,1)</span> es lo mismo que escribir <span class="inline">my_func(0, undefined, undefined, 1)</span>.
  </p>
  <hr />
  <p>El valor por defecto de una variable opcional puede ser una expresión, por lo que, por ejemplo, se pueden utilizar variables y llamar a funciones mientras se define una variable opcional. Tenga en cuenta que dicha expresión sólo se ejecutará si su argumento opcional no se proporciona en la llamada a la función. Véase el siguiente ejemplo de una función de registro:</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br />
    {<br />
        var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br />
        _string += object_get_name(object) + &quot;: &quot;;<br />
        _string += text;<br />
        <br />
        show_debug_message(_string);<br />
    }</p>
  <p>Esta función toma tres argumentos, donde el primer argumento es por defecto una constante <span class="notranslate">string</span>, el segundo argumento es por defecto una variable de instancia (en el ámbito de la instancia que llama) y el tercer argumento es por defecto una expresión que llama a una función para recuperar la fecha y hora actuales. Esta función puede llamarse ahora con hasta tres argumentos, como se ve en el siguiente ejemplo:</p>
  <p class="code">log();<br />
    // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br />
    <br />
    log(&quot;Player Shot&quot;, obj_player, 10);<br />
    // Prints: [10] obj_player: Player Shot
  </p>
  <h2>JSDoc</h2>
  <p>También le recomendamos que añada comentarios para definir las propiedades de la función (consulte la sección sobre <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">comentarios de JSDoc</a> para obtener más detalles), de manera que un simple <span class="notranslate">script</span> tendría el siguiente aspecto:</p>
  <p class="code">/// @function                 log(message);<br />
    /// @param {string}  message  The message to show<br />
    /// @description              Show a message whenever the function is called.<br />
    <br />
    function log(message)<br />
    {<br />
        show_debug_message(message);<br />
    }
  </p>
  <p>Se pueden añadir funciones adicionales para el <span class="notranslate">script</span> utilizando el mismo formato que se muestra arriba, una tras otra dentro del <span class="notranslate">script</span> <span class="notranslate">asset</span>.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>Valor de retorno</h2>
  <p>Las funciones en <span class="notranslate">scripts</span> también pueden devolver un valor, al igual que las funciones de <span class="notranslate">runtime</span>, y como tal pueden ser utilizadas en expresiones. Para ello se utilizaría la sentencia <a href="Language_Features/return.htm"><span class="inline">return</span></a> declaración:</p>
  <p class="code">return &lt;expression&gt;</p>
  <p>Hay que tener en cuenta que el <strong><i>la ejecución de la función termina en la declaración de retorno</i></strong>significa que cualquier código que venga después de la llamada de <strong>retorno </strong> <i>no se ejecut</i>ará. Aquí hay un ejemplo corto de una función llamada &quot;<span class="inline">sqr_calc</span>&quot; que calcula el cuadrado de cualquier valor que se le pase, y en caso de que el valor dado no sea un número real, utiliza <strong>return</strong> para terminar la función antes de tiempo para que el cálculo real nunca se ejecute:</p>
  <p class="code">/// @function           sqr_calc(val);<br />
    /// @param {real}  val  The value to calculate the square of<br />
    /// @description        Calculate the square of the given value<br />
    <br />
    function sqr_calc(val)<br />
    {<br />
        if (!is_real(val))<br />
        {<br />
            return 0;<br />
        }<br />
    <br />
        return (val * val);<br />
    }
  </p>
  <p>Tenga en cuenta que si crea una función <span class="notranslate">script</span> <em>sin</em> valor de retorno y luego en su código busca uno, obtendrá el valor <span class="inline">undefined</span> por defecto.</p>
  <p>Para llamar a una función <span class="notranslate">script</span> desde un fragmento de código, basta con utilizarla del mismo modo que cuando se llama a cualquier función <span class="notranslate">runtime</span>, es decir, escribir el nombre de la función con los valores de los parámetros entre paréntesis. Así, el anterior <span class="notranslate">script</span> se llamaría así:</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br />
    {<br />
        val = scr_sqr(amount);<br />
    }</p>
  <p class="note"><strong>NOTA</strong>: Cuando utilice sus propias funciones de <span class="notranslate">scripts</span> en el editor de código, puede pulsar<span> <img></span> o hacer clic con el botón central del ratón <span><img> </span>sobre el nombre de la función para abrir el <span class="notranslate">script</span> que la contiene para editarla directamente.</p>
  <h2>Nombres de guiones frente a nombres de funciones</h2>
  <p>Es importante entender que <i>los nombres de</i> <span class="notranslate">script</span> son <b>independientes de las funciones que contienen</b>, por lo que puede nombrar su <span class="notranslate">scripts</span> de una manera más &quot;de sentido común&quot;, es decir, todas sus funciones de IA podría ir en un <span class="notranslate">script</span> &quot;<span class="inline">Enemy_AI</span>&quot; (siguiendo las convenciones de nomenclatura estándar <span class="notranslate">asset</span> de caracteres alfanuméricos y la barra inferior &quot;_&quot; solamente). Sin embargo, todavía puedes llamar a <span class="notranslate">scripts</span> en tu juego - y puedes nombrar <span class="notranslate">scripts</span> igual que una función que definas en ellos - lo que puede dar lugar a un problema debido a la forma en que <span data-keyref="GameMaker Name">GameMaker</span> almacena las referencias de <span class="notranslate">asset</span>. Para dar un ejemplo considere este código, llamado desde una instancia:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>El código anterior está intentando llamar a un <span class="notranslate">script</span> llamado &quot;myscript&quot; dentro de un método, que en este caso fallará. Esto se debe a que la función en línea está utilizando el <em>índice</em> de <span class="notranslate">script</span> <span class="notranslate">asset</span> y <strong>no </strong>está llamando a la función <span class="notranslate">script</span> - por ejemplo: si el índice <span class="notranslate">script</span> se resuelve en &quot;4&quot;, esencialmente la función está llamando a <span class="inline">4(arg);</span>, lo que no tiene sentido. El código debería estar estructurado de una de las dos maneras siguientes:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(method(undefined, myscript), arg);<br />
    <br />
    // 2<br />
    function indirectCall(func, arg)<br />
    {<br />
        script_execute(func, arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Es importante tener esto en cuenta, especialmente cuando se trabaja con proyectos heredados en los que <span class="notranslate">scripts</span> contiene una única función, y la función se llama igual que <span class="notranslate">script</span>. Sin embargo, <em>nunca</em> debería hacer esto, y sus <span class="notranslate">scripts</span> deberían llamarse independientemente de las funciones que contienen.</p>
  <div data-conref="../../assets/snippets/Script_empty_reference_error.hts"> </div>
  <h2>Alcance del guión</h2>
  <p>Esto nos lleva a la última y más importante cosa que hay que saber sobre <span class="notranslate">scripts</span> y las funciones que contienen: <span class="notranslate">scripts</span> se analiza a nivel <b>global</b> y se <strong>compila al principio del juego</strong>. Esto significa que <em>, técnicamente,</em> todas las funciones en un <span class="notranslate">script</span> son <a href="Method_Variables.htm">variables de método</a>&quot;no vinculadas&quot;, y cualquier variable declarada fuera de una función en el <span class="notranslate">script</span> será considerada como <a href="Variables/Global_Variables.htm">variable global</a>. Por ejemplo, considere este script:</p>
  <p class="code">function Foo()<br />
    {<br />
        // Do something<br />
    }<br />
    blah = 10;<br />
    function Bar()<br />
    {<br />
        // Do something else<br />
    }</p>
  <p>En el caso anterior, no sólo hemos definido las funciones <span class="inline">Foo</span> y <span class="inline">Bar</span> sino también la variable <span class="inline">blah</span> y todas ellas se consideran creadas en el ámbito <b>global</b>. Las funciones no necesitan la palabra clave <span class="inline">global</span> para ser reconocidas ya que el compilador entiende que estas funciones forman parte de <span class="notranslate">script</span>, pero si se quisiera acceder a <span class="inline">blah</span> entonces habría que hacerlo:</p>
  <p class="code">val = global.blah;</p>
  <p>Dicho esto, le recomendamos que <b>siempre escriba explícitamente las variables globales</b> cuando las cree en <span class="notranslate">scripts</span> para evitar cualquier problema posterior. <span class="notranslate">Scripts</span> también es un lugar ideal para definir cualquier <strong>Macros</strong> o <strong>Enums</strong><a href="Variables/Constants.htm">(constantes</a>), ya que añadirlos a un <span class="notranslate">script</span> fuera de una función también significa que se crearán para su uso antes de que el código del juego comience a ejecutarse. A continuación se muestra un ejemplo de un <span class="notranslate">script</span> que está creando diferentes valores de alcance global para un juego:</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br />
    global.player_score = 0;<br />
    global.player_hp = 100;<br />
    global.pause = false;<br />
    global.music = true;<br />
    global.sound = true;<br />
    <br />
    enum rainbowcolors<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }<br />
    <br />
    #macro weapon_num 3<br />
    #macro weapon_gun 0<br />
    #macro weapon_bomb 1<br />
    #macro weapon_knife 2
  </p>
  <p>Observe cómo todas estas constantes se configuran fuera de cualquier llamada a una función, lo que significa que se inicializarán antes que todo lo demás y en un ámbito <em>global </em>. Esto significa que si quieres usar un script para inicializar variables en un ámbito de <em>instancia </em>, entonces debes envolverlas en una función, por ejemplo:</p>
  <p class="code">/// @function                init_enemy();<br />
    /// @description             Initialise enemy instance vars<br />
    <br />
    function init_enemy()<br />
    {<br />
        hp = 100;<br />
        dmg = 5;<br />
        mana = 50;<br />
    }
  </p>
  <p>Así pues, <span class="notranslate">scripts</span> puede utilizarse para generar macros, enums y variables globales antes de que se inicie el juego, de modo que estén listos para su uso en cualquier momento, y también puede utilizarse para crear métodos &quot;no vinculados&quot; (funciones definidas por el usuario) que pueden utilizarse en su juego como funciones de <span class="notranslate">GML</span> <span class="notranslate">runtime</span>.</p>
  <p>Una última cosa a tener en cuenta acerca de las funciones de <span class="notranslate">script</span> es que si usted está desarrollando para <strong>la Web </strong>(es decir, apuntando a <strong>HTML5</strong>), entonces hay un protocolo de función adicional que se puede utilizar cuando se añaden funciones a <span class="notranslate">scripts</span>, que es para prefijar un nombre de función con <span class="inline">gmcallback_</span>, por ejemplo:</p>
  <p class="code">gmcallback_create_button</p>
  <p>El uso del nombre de la función anterior significaría que la función <span class="inline">gmcallback_create_button()</span> no será ofuscada y por lo tanto puede ser utilizada en JavaScript <span class="notranslate">extensions</span> y otras áreas de su juego, por ejemplo, cuando se utilizan las <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><span class="inline">clickable_*</span></a> funciones.</p>
  <h2>Variables estáticas</h2>
  <p>Las funciones también pueden hacer uso de variables estáticas, que mantienen sus valores a lo largo de cada llamada a la función. <a href="Functions/Static_Variables.htm">Lee esta</a> página para obtener más información.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a href="Method_Variables.htm">Variables del método</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>