<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables y alcance de las variables</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining variables and their scoping in GML" />
  <meta name="rh-index-keywords" content="Variables And Variable Scope" />
  <meta name="search-keywords" content="variables,scope,local variables,instance variables,global variables" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variables y alcance de las variables</h1>
  <p>Como cualquier lenguaje de programaci√≥n, <b>GML</b> utiliza <i>variables</i> como unidad b√°sica para la mayor√≠a de las operaciones de programaci√≥n. Las variables se utilizan para almacenar informaci√≥n en la memoria de los dispositivos para su uso posterior (o instant√°neo), y se les da un nombre para poder referirse a ellas en <span class="notranslate">runtime</span> y en las funciones de <span class="notranslate">script</span>. Una variable en <b>GML</b> puede almacenar muchos datos diferentes <a href="Data_Types.htm"><strong>tipos de datos</strong></a>como un n√∫mero real (p. ej.: 100, 2,456575, -56, etc.), un <span class="notranslate">string</span> (p. ej.: &quot;¬°Hola mundo!&quot;), un n√∫mero entero (p. ej.: 1, 556, -7), o un booleano (<span class="inline">true</span> o <span class="inline">false</span>), as√≠ como otras cosas:</p>
  <p class="code">var _num = 126.4545;<br />
    var _str = &quot;Hello World&quot;;<br />
    new_num = _num * 100;<br />
    global.my_string = _str + &quot; I said&quot;;</p>
  <p>Tambi√©n se pueden utilizar variables para mantener los valores devueltos por las funciones, por ejemplo:</p>
  <p class="code">var _id = instance_nearest(x, y, obj_Tree);<br />
    root = sqrt(1000);<br />
    global.str = string_upper(&quot;Hello World&quot;);</p>
  <p>As√≠ pues, una variable es algo que podemos nombrar y utilizar para almacenar un valor para utilizarlo posteriormente en una o varias operaciones. Un gran ejemplo del &quot;mundo real&quot; de una variable es <b>pi ùúã . </b>.. es una variable que todo el mundo conoce y contiene el valor 3,14159265(etc...). ¬øPor qu√© la tenemos en nuestro idioma? Bueno, es mucho m√°s f√°cil decir a alguien &quot;pi&quot; que &quot;tres punto uno cuatro uno cinco nueve dos seis cinco&quot;. Nombrar las cosas as√≠ simplifica mucho la vida y tambi√©n significa que si el valor de esa variable cambia alguna vez, no tenemos que cambiar el n√∫mero en todas partes, ya que el <i>nombre de</i> la variable sigue siendo el mismo.</p>
  <p>Cuando se forman variables en <b>GML</b> deben tener un nombre que empiece por una letra o el s√≠mbolo de subrayado &quot;_&quot; y s√≥lo pueden contener letras, n√∫meros y el s√≠mbolo de subrayado '_' con una longitud m√°xima de 64 s√≠mbolos. As√≠, las variables v√°lidas son cosas como <span class="inline">fish</span>, <span class="inline">foo_bar</span>, <span class="inline">num1</span>, o <span class="inline">_str</span>, mientras que las variables no v√°lidas ser√≠an <span class="inline">6fish</span>, <span class="inline">foo bar</span>, o <span class="inline">*num</span>.</p>
  <p>Ahora bien, en muchos lenguajes de programaci√≥n es necesario crear una &quot;asignaci√≥n&quot; de variable antes de poder utilizarla. Esto significa b√°sicamente que le dices al ordenador el nombre que deseas utilizar para la variable y le asignas un valor inicial. A continuaci√≥n, se asigna a la variable un lugar en la memoria para almacenar el valor o realizar operaciones con ella. La asignaci√≥n de una variable tiene la forma de:</p>
  <p class="code">&lt;variable&gt; = &lt;expression&gt;;</p>
  <p>Una expresi√≥n puede ser un simple valor, pero tambi√©n puede ser m√°s complicada, por lo que, en lugar de asignar un valor a una variable, tambi√©n se puede a√±adir un valor al valor actual de la variable utilizando <span class="inline"><b>+=</b></span>, por ejemplo:</p>
  <p class="code">a = 100;¬†¬†¬†// Assigning a simple value<br />
    b = 200;<br />
    c = 300;<br />
    a += b;¬†¬†¬†¬†// Assigning with operation<br />
    a = b + c; // Assigning with expression</p>
  <p class="note"><span class="note">NOTA</span> El <span class="notranslate">GameMaker Language</span> tambi√©n aceptar√° &quot;<span class="inline">:=</span>&quot; para las asignaciones, aunque no suele ser la forma m√°s habitual de hacerlo:</p>
  <p class="code">&lt;variable&gt; := &lt;expression&gt;;</p>
  <p>Del mismo modo, puede restar utilizando <span class="inline"><b>-=</b></span>, multiplicar utilizando <span class="inline"><b>*=</b></span>, dividir utilizando <span class="inline"><b>/=</b></span>, o utilizar operadores a nivel de bits utilizando <span class="inline"><b>|=</b></span>, <span class="inline"><b>&amp;=</b></span>, o <span class="inline"><b>^=</b></span>. Tambi√©n puede sumar o restar <i>uno</i> de un valor utilizando <span class="inline"><b>++</b></span>, <span class="inline"><b>--</b></span>. Para m√°s informaci√≥n, consulte la secci√≥n <a href="Expressions_And_Operators.htm">Expresiones y operadores</a>.</p>
  <p>Tenga en cuenta que <i>no puede</i> hacer lo siguiente (o cualquier variaci√≥n):</p>
  <p class="code">a = b = c = 4;</p>
  <p>Y en su lugar deber√≠a hacerse como:</p>
  <p class="code">a = 4;<br />
    b = 4;<br />
    c = 4;</p>
  <p>Las asignaciones de variables mostradas arriba son todas variables de <strong>instancia </strong>, sin embargo hay otras tres categor√≠as principales de variables cuando se programa con <span data-keyref="GameMaker Name">GameMaker</span> y cada una tiene su propio <strong>alcance </strong>(que puede ser considerado como su √°rea de operaci√≥n, o alcance). Los diferentes tipos de variables y su alcance se describen en las siguientes p√°ginas:</p>
  <ul class="colour">
    <li><a href="Variables/Local_Variables.htm">Variables locales</a></li>
    <li><a href="Variables/Instance_Variables.htm">Variables de instancia</a></li>
    <li><a href="Variables/Global_Variables.htm">Variables globales</a></li>
    <li><a href="Variables/Constants.htm">Constantes</a></li>
  </ul>
  <p>El <span class="notranslate">GameMaker Language</span> tambi√©n tiene m√∫ltiples y diferentes variables incorporadas que pueden tener cualquiera de los alcances antes mencionados (excepto <i>local</i>). Estas variables son especiales, ya que se incluyen por defecto como parte del <span class="notranslate">objects</span> y del <span class="notranslate">rooms</span> en el mundo del juego. Algunas variables globales incorporadas se enumeran en la secci√≥n mencionada anteriormente, y las diferentes partes del manual para <span class="notranslate">sprites</span>, <span class="notranslate">rooms</span>, <span class="notranslate">objects</span>, etc... tambi√©n describen las variables incorporadas disponibles en cada caso. Ejemplos de estas variables de instancia incorporadas ser√≠an:</p>
  <ul class="colour">
    <li><span class="inline"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">sprite_index</a></span></li>
    <li><a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><span class="inline">path_scale</span></a></li>
    <li><a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><span class="inline">speed</span></a></li>
  </ul>
  <p>Y ejemplos de variables globales incorporadas ser√≠an:</p>
  <ul class="colour">
    <li><span class="inline"><a data-xref="{title}" href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm">view_xport</a></span></li>
    <li><span class="inline"><a data-xref="{title}" href="../GML_Reference/Asset_Management/Instances/instance_count.htm">instance_count</a></span></li>
    <li><span class="inline"><a data-xref="{title}" href="../GML_Reference/Asset_Management/Rooms/room.htm">room</a></span></li>
  </ul>
  <p>La mayor√≠a de las variables incorporadas pueden cambiarse y establecerse como otras variables, y algunas incluso pueden ser <a href="Arrays.htm">matrices</a>, s√≥lo que no tienes que establecerlas para crearlas como lo har√≠as con una variable normal, ya que ya estar√°n inicializadas con un valor por defecto.</p>
  <p>Por √∫ltimo, hay una serie de funciones que se dedican a establecer, obtener o comprobar variables de alguna manera, disponibles en la siguiente p√°gina:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funciones variables</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atr√°s: <a href="GML_Overview.htm">Visi√≥n general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="Data_Types.htm">Tipos de datos</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">¬© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
variables
variables - built-in
variables - scope
declaring variables
scope
built-in variables
-->
  <!-- TAGS
variables
-->
</body>
</html>