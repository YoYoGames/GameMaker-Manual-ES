<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Accesos</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different Accessors" />
  <meta name="rh-index-keywords" content="Accessors" />
  <meta name="search-keywords" content="Accessors,@,[| ],[@ ],[# ],[? ],grid accessor,list accessor,map accessor,array accessor" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Accesos</h1>
  <p>El <span class="notranslate">GameMaker Language</span> (<span class="notranslate">GML</span>) también le permite acceder a ciertas <a href="../GML_Reference/Data_Structures/Data_Structures.htm">Estructuras</a> de Datos y <a href="Arrays.htm">Arreglos</a> a través del uso de expresiones lógicas denominadas <b>accesores</b>. Esto está estructurado de forma similar a cuando se trabaja normalmente con un array, sólo que utilizamos un <em>símbolo identificador</em> antes del primer argumento para decirle a <span data-keyref="GameMaker Name">GameMaker</span> que se está trabajando en una estructura de datos (previamente creada) o en el literal del array.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">Listas DS [| ]</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot">La sintaxis de las <a href="../GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">listas DS</a> es:</p>
    <p class="code">list_index[| index]</p>
    <p class="dropspot">Así que cuando hayas utilizado <span class="inline">ds_list_create()</span> para crear tu lista, utilizarás el índice de la lista (que has almacenado en una variable) para referenciarla, siendo el valor del &quot;índice&quot; la posición en la lista a establecer o añadir. Por ejemplo, el siguiente código crea una lista y luego añade 10 entradas, estableciendo cada entrada con un número aleatorio del 0 al 9:</p>
    <p class="code">ds = ds_list_create();<br />
      var _index = 0;<br />
      repeat(10)<br />
      {<br />
          ds[| _index++] = irandom(9);<br />
      }</p>
    <p class="dropspot">Tenga en cuenta que si utiliza una expresión para añadir una referencia a un índice que ya tiene un valor, el valor anterior será reemplazado en lugar de añadir otro índice a la lista. Para añadir más entradas necesitaría conocer el tamaño de ds_list y añadirlas al final. También vale la pena señalar que se puede establecer un índice de lista que sea <i>mayor</i> que el tamaño de la lista a la que se hace referencia, y esto establecerá ese valor, expandiendo la lista al mismo tiempo e inicializando todas las posiciones de la lista hasta el índice dado como 0.</p>
    <p class="dropspot">Una vez que hayas creado tu estructura de lista y la hayas llenado de datos, para obtener valores de la lista tendrías algo como</p>
    <p class="code">value = ds[| 5];</p>
    <p class="dropspot">Lo anterior obtendrá el valor de la posición 5 (el sexto índice, ya que las listas comienzan en 0) y lo almacenará en una variable. Si se suministra una posición que está fuera del tamaño de la lista, se devolverá el valor <span class="inline">undefined</span>, que se puede comprobar con la función <a href="../GML_Reference/Variable_Functions/is_undefined.htm"><span class="inline">is_undefined()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">DS Maps [? ]</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">La sintaxis de los <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">mapas DS</a> es:</p>
    <p class="code">map_index[? key]</p>
    <p class="dropspot">Después de crear su mapa con <span class="inline">ds_map_create()</span>, usted utilizaría el índice del mapa que ha almacenado en una variable para referenciarlo, siendo el valor de la &quot;clave&quot; la clave del mapa a establecer u obtener. Por ejemplo, el siguiente código crea un mapa y luego añade unas cuantas entradas al mismo utilizando esta sintaxis:</p>
    <p class="code">ds = ds_map_create();<br />
      ds[? &quot;Name&quot;] = &quot;Hamish&quot;;<br />
      ds[? &quot;Company&quot;] = &quot;MacSeweeny Games&quot;;<br />
      ds[? &quot;Game&quot;] = &quot;Catch The Haggis&quot;;</p>
    <p class="dropspot">Tenga en cuenta que si el mapa ya contiene el mismo valor de la clave que está intentando añadir, no creará una clave duplicada con el nuevo valor, sino que se sustituirá el valor anterior.</p>
    <p class="dropspot">Una vez que hayas creado tu estructura de mapa y la hayas llenado de datos, para obtener valores de una clave de mapa específica tendrías algo como esto:</p>
    <p class="code">value = ds[? &quot;Name&quot;];</p>
    <p class="dropspot">Lo anterior obtendrá el valor de la clave &quot;Nombre&quot; y lo almacenará en una variable, pero tenga en cuenta que si la clave dada no existe en el mapa DS, entonces el valor devuelto será <span class="inline">undefined</span>. Esto puede comprobarse utilizando la función <a href="../GML_Reference/Variable_Functions/is_undefined.htm"><span class="inline">is_undefined()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">Rejillas DS [# ]</a></p>
  <div class="droptext" data-targetname="drop-down14">
    <p class="dropspot">La sintaxis de <a href="../GML_Reference/Data_Structures/DS_Grids/DS_Grids.htm">la red DS</a> es:</p>
    <p class="code">grid_index[# xpos, ypos]</p>
    <p class="dropspot">Después de crear tu cuadrícula con la función <span class="inline">ds_grid_create()</span>, usarás el índice de la cuadrícula que has almacenado en una variable para referenciarla, siendo los &quot;xpos&quot; e &quot;ypos&quot; la posición dentro de la cuadrícula para obtener o establecer un valor. Por ejemplo, el siguiente código crea una rejilla, la borra a 0, y luego añade algunas entradas a la misma:</p>
    <p class="code">ds = ds_grid_create();<br />
      ds_grid_clear(ds, 0);<br />
      var _gw = ds_grid_width(ds) - 1;<br />
      var _gh = ds_grid_height(ds) - 1;<br />
      repeat(10)<br />
      {<br />
          var _xx = irandom(_gw);<br />
          var _yy = irandom(_gh);<br />
          if (ds[# _xx, _yy] == 0)<br />
          {<br />
              ds[# _xx, _yy] = 1;<br />
          }<br />
      }</p>
    <p class="dropspot">Una vez que hayas creado tu estructura de cuadrícula y la hayas llenado de datos, para obtener los valores de una posición específica de la cuadrícula tendrías algo como</p>
    <p class="code">value = ds[# mouse_x div 16, mouse_y div 16];</p>
    <p class="dropspot">Lo anterior obtendrá el valor de la ds_grid dada en base a la posición del ratón (dividida por el ancho de la &quot;celda&quot; en el <span class="notranslate">room</span> para obtener la ubicación correcta). Si se suministra una posición que está fuera de los límites de la cuadrícula, entonces se devolverá el valor <span class="inline">undefined</span>, que se puede comprobar con la función <a href="../GML_Reference/Variable_Functions/is_undefined.htm"><span class="inline">is_undefined()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down15" href="#">Matrices [@ ]</a></p>
  <div class="droptext" data-targetname="drop-down15">
    <p class="dropspot">Este accesorio sólo se utiliza cuando está activada la <a href="../../Settings/Game_Options.htm">opción Copiar al escribir</a>.</p>
    <p class="dropspot">Los arrays también tienen sus propios accesos que funcionan de forma similar a los mencionados anteriormente para <span class="notranslate">data structures</span>. Sin embargo los accesos a los arrays tienen una propiedad interesante y es la de permitirte modificar un array desde una <a href="Script_Functions.htm">función de script</a> o <a href="Method_Variables.htm"><span class="notranslate">method</span></a> sin tener que copiarlo. Cuando se pasa un array a una función, se <strong>pasa por referencia</strong>, lo que significa que el propio array no se está dando en el <span class="notranslate">script</span> sino que simplemente se está haciendo referencia a él para obtener los datos. Normalmente, si necesitas cambiar el array, se <em>copiará </em>en <span class="notranslate">script</span> y entonces tendrás que devolver el array copiado para que se actualice el array original. Esto puede tener costosos gastos de procesamiento, por lo que puedes usar el accesorio en su lugar, ya que cambiará el array original <em>directamente </em>sin necesidad de copiarlo. Puedes ver cómo funciona esto en los siguientes ejemplos.</p>
    <p class="dropspot">La sintaxis para las matrices, utilizando el accesorio <span class="inline">@</span>, es:</p>
    <p class="code">array[@ i]</p>
    <p class="dropspot">Después de haber creado tu array en una instancia, puedes pasarlo a un <span class="notranslate">script</span> por referencia y usar el accesorio <span class="inline">@</span> para cambiarlo directamente. Por ejemplo, crearías el array y llamarías a la función así:</p>
    <p class="code">array[99] = 0;<br />
      array_populate(array);</p>
    <p class="dropspot">La función en sí tendría algo así:</p>
    <p class="code">function array_populate(_array)<br />
      {<br />
          var a = _array; var i = 0;<br />
          repeat(25)<br />
          {<br />
              i = irandom(99);<br />
              while (a[i] != 0)<br />
              {<br />
                  i = irandom(99);<br />
              }<br />
              a[@ i] = 100;<br />
          }<br />
      }</p>
    <p class="dropspot">Lo único que hace esta función es seleccionar 25 posiciones aleatorias en el array y establecer el valor de la posición del array elegido en 100.</p>
    <p class="dropspot">Por supuesto, el accesorio <span class="inline">@</span> no es necesario cuando <strong>Copy on</strong> Write está desactivado.</p>
    <p class="note"><span class="note">NOTA</span> No se puede utilizar el accesorio de matriz <span class="inline">@</span> cuando se trabaja con la matriz <span class="inline">argument[n]</span> en funciones de script.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#">Estructuras [$ ]</a></p>
  <div class="droptext" data-targetname="drop-down16">
    <p class="dropspot"><span>La sintaxis de <a href="Structs.htm">los structs</a> es</span></p>
    <p class="code">struct[$ &quot;name&quot;]</p>
    <p class="dropspot">Este accesorio es esencialmente una envoltura para las funciones <span><a href="../GML_Reference/Variable_Functions/variable_struct_get.htm"><span class="inline">variable_struct_get()</span></a> y <a href="../GML_Reference/Variable_Functions/variable_struct_set.htm"><span class="inline">variable_struct_set()</span></a>, y lo usarías de manera muy similar al accesorio para un mapa DS. Por ejemplo, si has creado un <span class="notranslate">struct</span> y quieres recuperar un valor de una variable llamada &quot;mi_salud&quot; entonces harías:</span></p>
    <p class="code">var _hp = struct[$ &quot;my_health&quot;];</p>
    <p class="dropspot">Como puede ver, no se suministra la variable en sí, sino una <em>cadena</em> con la variable. Tenga en cuenta que si el <span class="notranslate">struct</span> no tiene una variable con el nombre dado, entonces el accesorio devolverá <span class="inline">undefined</span> como valor.</p>
    <p class="dropspot">Para establecer una variable en un <span class="notranslate">struct</span> se debe hacer lo siguiente</p>
    <p class="code">struct[$ &quot;my_score&quot;] = 100;</p>
    <p class="dropspot">Al igual que con la obtención de un valor, se proporciona el nombre de la variable a establecer como <span class="notranslate">string</span>, y se establecerá al valor dado. Si el nombre de la variable utilizada no existe en <span class="notranslate">struct</span>, entonces se creará y se establecerá el valor dado.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>Una característica importante de los accesores es el hecho de que se pueden <i>encadenar</i>. Esto significa que si tienes varios <span class="notranslate">data structures</span> y/o arrays anidados, ya no hay necesidad de usar una variedad de funciones para obtener acceso a un valor que está en lo profundo de la estructura anidada. Por ejemplo, digamos que tienes un array, y cada elemento del array es una lista DS, así:</p>
  <p class="code">array = array_create(3);<br />
    for (var i = 0; i &lt; 3; ++i;)<br />
    {<br />
        array[i] = ds_list_create();<br />
        switch(i)<br />
        {<br />
            case 0:<br />
                with (obj_Wall) ds_list_add(array[i], id);<br />
            break;<br />
    <br />
            case 1:<br />
                with (obj_Door) ds_list_add(array[i], id);<br />
            break;<br />
    <br />
            case 2:<br />
                with (obj_Chest) ds_list_add(array[i], id);<br />
            break;<br />
        }<br />
    }
  </p>
  <p>En el código anterior hemos creado un array de 3 ítems y hemos asignado una lista DS a cada uno de ellos, y luego hemos poblado las diferentes listas con los IDs de instancia de varios <span class="notranslate">objects</span> en el juego. Ahora, para acceder a un ID en una de las listas podemos hacer lo siguiente:</p>
  <p class="code">var _list = array[0];<br />
    var _id = ds_list_find_value(_list, 0);</p>
  <p>Sin embargo, se puede hacer lo mismo utilizando accesores encadenados de una manera mucho más limpia y que utiliza menos código:</p>
  <p class="code">var _id = array[0][| 0];</p>
  <p>Se pueden encadenar múltiples accesores de esta manera y pueden ser de múltiples tipos para acceder a la información almacenada en cada parte de la estructura anidada. Aquí hay algunos ejemplos más:</p>
  <p class="code">// Access a grid that has been added to a list that is part of a map:<br />
    var _a = data[? &quot;lists&quot;][| 0][# 0, 0];<br />
    <br />
    // Access an array nested in a list from a script and modify it:<br />
    data[| 0][@ 10] = 100;<br />
    <br />
    // Access a map nested in a grid nested in a list nested in an array:<br />
    data[0][| 10][# 3, 4][? &quot;key&quot;] = &quot;hello world&quot;;
  </p>
  <p>El uso de accesores encadenados para las cosas no sólo significa que puedes escribir un código más compacto, sino que también te permitirá usar la iteración (por ejemplo, usando un <a href="Language_Features/for.htm"><span class="inline">for</span></a> ) y otras técnicas para acceder a tus datos de una manera más limpia e intuitiva.</p>
  <p>Vale la pena notar que cuando se usan accesores de esta manera, siempre se debe usar el accesor <span class="inline">@</span> para los arrays, ya que de otra manera se estará agregando una sobrecarga adicional a cualquier acción que se realice. Como se ha mencionado anteriormente, por defecto los arrays se pasan por referencia a las funciones y luego utilizan el comportamiento &quot;copy on write&quot; cuando se modifican. Sin embargo, si el array forma parte de una cadena, el elemento anterior de la cadena se actualizará con el array copiado y el &quot;original&quot; se eliminará. Por ejemplo, haciendo algo como esto</p>
  <p class="code">// In an object event<br />
    data[| 0][0] = 100;<br />
    <br />
    // In a function<br />
    data[| 0][0] = 200;
  </p>
  <p>consigue los mismos resultados que haciendo esto:</p>
  <p class="code">// In an object event<br />
    data[| 0][0] = 100;<br />
    <br />
    // In a function<br />
    data[| 0][@ 0] = 200;
  </p>
  <p>Sin embargo, el segundo ejemplo es mejor, ya que funciona sin la sobrecarga innecesaria de copiar primero toda la matriz.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="Language_Features.htm">Características lingüísticas</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>