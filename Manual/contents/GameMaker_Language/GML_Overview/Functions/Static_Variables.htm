<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables estáticas</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Static Variables" />
  <meta name="search-keywords" content="Static Variables,static" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variables estáticas</h1>
  <p>Una característica interesante de las <a href="../Script_Functions.htm">funciones de script</a> y las <a href="../Method_Variables.htm">variables de método</a> es que pueden tener <strong>variables estáticas</strong>. Una variable estática es aquella que se define la primera vez que se llama a la función y que mantendrá su valor de ahí en adelante. Para crear una variable estática es necesario definirla utilizando la palabra clave <span class="inline">static</span>, como se muestra en este sencillo ejemplo:</p>
  <p class="code">counter = function()<br />
    {<br />
        static num = 0;<br />
        return num++;<br />
    }</p>
  <p>En el ejemplo anterior, la variable <span class="inline">num</span> es una variable estática, por lo que se definirá como <span class="inline">0</span> la primera vez que se llame a la función, pero cada vez que se llame a la función después de eso, se ignorará la inicialización de la variable. Por lo tanto, si luego se llama a esta función así</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br />
    {<br />
        show_debug_message(counter());<br />
    }</p>
  <p>La salida será:</p>
  <p class="code">0<br />
    1<br />
    2<br />
    3<br />
    4<br />
    5<br />
    6<br />
    7<br />
    8<br />
    9</p>
  <p>Si no utilizara la palabra clave <span class="inline">static</span> aquí, entonces la salida sería simplemente <span class="inline">0</span> para cada iteración de la función <span class="notranslate">loop</span>, ya que la variable <span class="inline">num</span> se definirá como <span class="inline">0</span> cada vez que se llame a la función antes de ser devuelta. Tenga en cuenta que una variable estática sólo puede ser cambiada dentro de la función original, y devolverla simplemente le dará una copia de su valor - esencialmente la variable estática compartida sólo puede ser cambiada por la función que la contiene.</p>
  <p>Una variable estática siempre se inicializa en la parte superior de la función, por lo que no importa dónde se defina una variable estática en la función, siempre estará disponible para ser leída y modificada a lo largo de la función (incluso si se utiliza antes de ser definida). Vea el siguiente ejemplo:</p>
  <p class="code">function add_health()<br />
    {<br />
        my_health++;<br />
        show_debug_message(my_health);<br />
        static my_health = 1;<br />
    }</p>
  <p>Aquí la variable estática &quot;<span class="inline">my_health</span>&quot; está siendo modificada e impresa en la salida del compilador <em>antes de</em> ser inicializada. Aunque esto parece incorrecto, está perfectamente bien porque las variables estáticas se inicializan <em>antes de </em>que se ejecute cualquier código de función. Tenga en cuenta que si hay múltiples variables estáticas en una función, el orden en el que fueron definidas se mantendrá cuando se inicialicen al principio.</p>
  <p>También puede utilizar la palabra clave <span class="inline">static</span> dentro de una función para crear una <strong>función estática</strong>, lo que -al igual que con las variables- significa simplemente que la función sólo se definirá una vez, que es la primera vez que se llama a la función, por ejemplo:</p>
  <p class="code">function(_x, _y) Vector2 constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function( _other )<br />
        {<br />
            x += _other.x;<br />
            y += _other.y;<br />
        }<br />
    }
  </p>
  <p>En el ejemplo anterior, la función constructora <span class="inline"><span class="inline">Vector2</span> puede utilizarse para crear un <span class="notranslate">struct</span>, y el <span class="notranslate">struct</span> tendrá algunas variables, una de las cuales es la variable de método <span class="inline"><span class="inline">Add</span>. Dado que esta variable se ha definido como estática, la función que contiene sólo se inicializará <em>una vez </em>la primera vez que se llame a la función <span class="inline">Vector2</span>, y todas las demás <span class="notranslate">structs</span> creadas con este constructor harán referencia a la función <span class="inline">Add</span> que se creó inicialmente, en lugar de crear una nueva función para cada <span class="notranslate">struct</span> (para más información sobre <span class="notranslate">structs</span> y la palabra clave <span class="inline">constructor</span> consulte <a href="../Structs.htm">aquí</a>).</p>
  <p>Cuando se utiliza la herencia con constructores, cualquier variable estática en el constructor hijo sólo se inicializará una vez que el constructor padre se haya ejecutado, por lo que las variables estáticas del constructor hijo no anularán las variables estáticas del padre. Vea el siguiente ejemplo:</p>
  <p class="code">function Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 10;<br />
    }<br />
    <br />
    function Child() : Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 20;<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>La llamada al constructor <span class="inline">Child()</span> imprime esto en el registro de salida:</p>
  <p class="code">10<br />
    20</p>
  <p>El primer valor es del constructor padre, y el segundo es del constructor hijo. Esto muestra que la variable estática del hijo <span class="inline">value</span> no fue inicializada hasta que el constructor padre terminó, y que en cada constructor la variable estática fue inicializada antes de la llamada a <span class="inline">show_debug_message()</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../GML_Overview.htm">Visión general de GML</a></div>
        <div style="float:right">Siguiente: <a data-xref="{title}" href="../Arrays.htm">Arrays</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Static Variables
static
-->
  <!-- TAGS
static
-->
</body>
</html>