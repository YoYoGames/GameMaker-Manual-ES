<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>Con esta función puede convertir <span class="notranslate">structs</span> y arrays simples o anidados en un JSON válido <span class="notranslate">string</span>. Usted suministra el valor inicial a utilizar (un índice de matriz o una referencia <span class="notranslate">struct</span> ) y luego la función lo &quot;encadenará&quot;, convirtiéndolo en una cadena JSON (convirtiendo matrices <span class="notranslate">GameMaker</span> en matrices JSON, y <span class="notranslate">GameMaker</span> <span class="notranslate">structs</span> en JSON <span class="notranslate">objects</span>).</p>
  <p>Al utilizar esta función hay que tener en cuenta algunas cosas importantes:</p>
  <ul class="colour">
    <li>La función <em>no </em> convertirá los mapas DS, las listas o cualquier otra estructura de datos en JSON, y simplemente almacenará el valor del índice interno de la estructura (que es de poca utilidad ya que el índice cambiará entre las ejecuciones del juego), y como tal no debes intentar encadenar ningún valor que pueda contener referencias a <span class="notranslate">data structures</span> (para eso tienes <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>La función convertirá casi cualquier valor en un JSON &quot;válido&quot; <span class="notranslate">string</span>, sin embargo los valores reales contenidos en el <span class="notranslate">string</span> pueden no ser exactamente lo que usted espera debido a la forma en que opera el estándar JSON:<br>
      <br>
      &quot;JSON es agnóstico respecto a los números. En cualquier lenguaje de programación, puede haber una variedad de tipos de números de diversas capacidades y complementos, fijos o flotantes, binarios o decimales. Esto puede dificultar el intercambio entre distintos lenguajes de programación. En cambio, JSON sólo ofrece la representación de los números que utilizan los humanos: un <span class="notranslate">sequence</span> de dígitos. Todos los lenguajes de programación saben cómo dar sentido a los dígitos <span class="notranslate">sequences</span> aunque no estén de acuerdo con las representaciones internas&quot;.<br>
      <br>
      Para más información, consulte el <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">estándar JSON de la ECMA</a>.
    </li>
    <li>Si incluye un int64 en los valores a convertir a JSON lo escribirá como un <i>int</i> si está en el rango válido para un int32, como un <i>double</i> si puede hacerlo sin perder precisión o (si ninguno de esos casos es aplicable) como una <i>cadena</i> con un identificador &quot;<span class="inline">@i64@</span>&quot; antes y &quot;<span class="inline">$i64$</span>&quot; después. Cuando vuelva a analizar el JSON, <span data-keyref="GameMaker Name">GameMaker</span> recogerá estos identificadores y volverá a convertir el valor en un int64. Esto significa que si el JSON está destinado a un <span class="notranslate">server</span> o algún otro objetivo que no sea GameMaker, estos valores no serán apropiados y por lo tanto deben ser evitados.</li>
    <li>Si incluye <span class="inline">infinity</span>, <span class="inline">-infinity</span> o <span class="inline">NaN</span> en los valores a convertir a JSON, se codificarán como <span class="notranslate">strings</span> ya que estos valores no forman parte del estándar JSON, y al analizar el JSON resultante <strong>no </strong>se convertirán de nuevo en sus valores <span class="notranslate">runtime</span> y se quedarán como <span class="notranslate">strings</span>. Tenga en cuenta que <span class="inline">NaN</span> se convertirá en &quot;nan&quot; (minúscula) al encadenarse.</li>
    <li>Hay que tener cuidado al escribir cualquier cadena JSON devuelta en un archivo <span class="inline">ini</span>, ya que las especificaciones de <span class="inline">ini</span> pueden causar problemas al utilizar comillas y caracteres de escape. Consulte la función <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a> para más información.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">json_stringify(val)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td><span class="notranslate">val</span></td>
        <td><span data-keyref="Type_Struct">Struct</span> o <span data-keyref="Type_Array">Array</span></td>
        <td><span class="notranslate">The reference value for a struct or array to convert into a JSON string</span></td>
      </tr>
      <tr>
        <td>filter_func</td>
        <td><span data-keyref="Type_Function"><a href="../../../GML_Overview/Script_Functions.htm" target="_blank">Function</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> Filter function that processes each item. Syntax: <span class="inline2">function(key, value) -&gt; new_value</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code"><span data-keyref="Type_String">String</span></p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">var _contents =<br />
    {<br />
        version : &quot;1.0.0&quot;,<br />
        data:<br />
        {<br />
            coins : 4,<br />
            mana : 15,<br />
            playername : &quot;Gurpreet&quot;,<br />
            items :<br />
            [<br />
                ITEM.SWORD,<br />
                ITEM.BOW,<br />
                ITEM.GUITAR<br />
            ]<br />
        }<br />
    };<br />
    <br />
    var _json_string = json_stringify(_contents);
  </p>
  <p>El código anterior convertirá el <span class="inline2">_contents</span> <span class="notranslate">struct</span> en un JSON <span class="notranslate">string</span> y almacenará el <span class="notranslate">string</span> en una variable. El <span class="notranslate">string</span> devuelto tendría el siguiente aspecto:</p>
  <p class="code">{ &quot;data&quot;: { &quot;items&quot;: [ 0.0, 1.0, 2.0 ], &quot;coins&quot;: 4.0, &quot;mana&quot;: 15.0, &quot;playername&quot;: &quot;Gurpreet&quot; }, &quot;version&quot;: &quot;1.0.0&quot; }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Encoding_And_Hashing.htm">Codificación de archivos</a></div>
        <div style="float:right">Siguiente: <a href="json_parse.htm"><span class="notranslate">json_parse</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>