<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>array_sort</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function array_sort" />
  <meta name="rh-index-keywords" content="array_sort" />
  <meta name="search-keywords" content="array_sort" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span>array_sort</span></h1>
  <p>Con esta función se puede ordenar un array en orden ascendente o descendente o utilizando una función personalizada para definir el orden de ordenación. La función requiere que proporcione el array a ordenar, y luego cualquiera de los siguientes:</p>
  <ul class="colour">
    <li>Las constantes <span class="inline">true</span> o <span class="inline">false</span> para indicar un <span>orden ascendente (<span class="inline">true</span>) o descendente (<span class="inline">false</span>)</span></li>
    <li>Una función personalizada para definir el orden de clasificación</li>
  </ul>
  <p>Esta función modificará el contenido de la matriz original que se suministró. Para crear una copia ordenada, utilice <span class="inline"><a href="array_copy.htm">array_copy()</a></span> para duplicar el array primero, y luego páselo a esta función.</p>
  <h3>Utilizar una función personalizada</h3>
  <p>Si utiliza una función personalizada para ordenar, debe tomar 2 argumentos que recibirán los valores del elemento actual y del siguiente elemento respectivamente. La función debe devolver cualquiera de los siguientes valores para afectar el orden de clasificación (donde <span class="inline">elm1</span> es el elemento actual y <span class="inline">elm2</span> es el siguiente elemento):</p>
  <ul class="colour">
    <li><span class="inline">0</span>Si <span class="inline">elm1</span> y <span class="inline">elm2</span> son iguales</li>
    <li><span class="inline">&lt;= -1</span> (entero negativo): si <span class="inline">elm1</span> va antes de <span class="inline">elm2</span></li>
    <li><span class="inline">&gt;= 1</span> (número entero positivo): si <span class="inline">elm1</span> va después de <span class="inline">elm2</span></li>
  </ul>
  <p class="note"><span class="note">NOTA</span> El valor devuelto por su función personalizada debe ser un entero. Los valores de punto flotante menores que 1 se leerán como 0, por lo que debe utilizar <a href="../Maths_And_Numbers/Number_Functions/sign.htm"><span class="inline">sign()</span></a> o <a href="../Maths_And_Numbers/Number_Functions/round.htm"><span class="inline">round()</span></a> si su función trabaja con valores de coma flotante.</p>
  <p>Si el array contiene un conjunto de <span class="notranslate">strings</span>, entonces el <span class="notranslate">strings</span> se ordenará alfabéticamente basándose en el alfabeto inglés cuando se utilice el tipo de ordenación ascendente/descendente por defecto. Todos los demás <span class="notranslate">data types</span> se ordenarán en base a su valor numérico, cuyos valores exactos dependerán del propio <span class="notranslate">data type</span> (por ejemplo, un array de <span class="notranslate">buffers</span> se ordenaría en base al valor numérico de sus direcciones de memoria).</p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">array_sort(variable, sorttype_or_function);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td><span class="notranslate">variable</span></td>
        <td><span data-keyref="Type_Array"><a href="../../../../GameMaker_Language/GML_Overview/Arrays.htm" target="_blank">Matriz</a></span></td>
        <td><span class="notranslate">The variable that holds the array.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span>sorttype_or_function<span> </span></td>
        <td><span data-keyref="Type_Bool"><a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Booleano</a></span> o <span data-keyref="Type_Function_Script"><a href="../../../../GameMaker_Language/GML_Overview/Script_Functions.htm" target="_blank">Función de script</a></span>/<span data-keyref="Type_Method"><a href="../../../../GameMaker_Language/GML_Overview/Method_Variables.htm" target="_blank">Método</a></span></td>
        <td><span class="notranslate">The sort type (<span><span class="inline">true</span> para la ascendente o <span class="inline">false</span> para la descendente) o una referencia a la función que se utilizará para la ordenación.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">var _a = [10, 9, 8, 7, 6, 5];<br />
    <br />
    array_sort(_a, function(elm1, elm2)<br />
    {<br />
        return elm1 - elm2;<br />
    });
  </p>
  <p>El código anterior utiliza una función de ordenación personalizada para ordenar el array en orden ascendente. La función de ordenación toma los dos elementos del array como <span class="inline">elm1</span> y <span class="inline">elm2</span> y realiza una resta sobre ellos. Si <span class="inline">elm1</span> es mayor que <span class="inline">elm2</span>, la resta resulta en un número positivo que empuja a <span class="inline">elm1</span> a estar después de <span class="inline">elm2</span>, por lo tanto los pone en un orden ascendente.</p>
  <p>He aquí un ejemplo ampliado:</p>
  <p class="code">var _xx, _yy, _a;<br />
    <br />
    for (var i = 0; i &lt; 10; i++)<br />
    {<br />
        _xx = irandom(room_width);<br />
        _yy = irandom(room_height);<br />
        _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet);<br />
    }<br />
    <br />
    show_debug_message(_a);<br />
    <br />
    var _f = function(inst1, inst2)<br />
    {<br />
        return inst1.x - inst2.x;<br />
    }<br />
    <br />
    array_sort(_a, _f);<br />
    show_debug_message(_a);
  </p>
  <p>El código anterior creará un array de 10 instancias colocadas en posiciones aleatorias dentro de <span class="notranslate">room</span>. El mensaje de depuración mostrará algo como lo siguiente:</p>
  <p class="code">[ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]</p>
  <p>A continuación, el código crea un método para ser utilizado en la función <span class="inline">array_sort()</span> que devuelve la diferencia entre cada una de las posiciones X de las instancias en el <span class="notranslate">room</span>. Luego, la función <span class="inline">array_sort()</span> se ejecuta utilizando ese método, ordenando las instancias por X de menor a mayor. La salida para el array sería entonces algo así:</p>
  <p class="code">[ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Variable_Functions.htm">Funciones variables</a></div>
        <div style="float:right">Siguiente: <a href="array_length.htm"><span class="notranslate">array_length</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
array_sort
-->
  <!-- TAGS
array_sort
-->
</body>
</html>