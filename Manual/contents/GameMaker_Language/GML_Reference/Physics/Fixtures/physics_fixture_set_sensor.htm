<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_fixture_set_sensor</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_fixture_set_sensor" />
  <meta name="rh-index-keywords" content="physics_fixture_set_sensor" />
  <meta name="search-keywords" content="physics_fixture_set_sensor" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_fixture_set_sensor</h1>
  <p>Algunas veces querrás que tu juego detecte y reconozca cuando dos instancias con fixtures colisionan, pero sin tener ninguna reacción física a la colisión. Esto puede hacerse convirtiendo el fixture en un sensor, lo que básicamente significa que generarán un evento de colisión pero sin respuesta física, de modo que puedes utilizar estas instancias como &quot;disparadores&quot; para que ocurran otros eventos en el juego <span class="notranslate">room</span>. Cualquier fixture puede ser marcado como un sensor, y no hay diferencia si la instancia a la que está ligada es estática o está en movimiento.</p>
  <p class="note"><b>NOTA</b>: Un accesorio de sensor disparará el evento de colisión <b>sólo</b> cuando la colisión <b>ocurra por primera vez</b>, lo que significa que no se obtiene un flujo de eventos de colisión a medida que los dos cuerpos continúan superponiéndose (que es lo que ocurriría tradicionalmente). Si dejan de solaparse y se solapan posteriormente se disparará otro evento de colisión.</p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">physics_fixture_set_sensor(fixture, state)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td><span class="notranslate">fixture</span></td>
        <td><span data-keyref="Type_ID_PhyFixture">ID de la instalación física</span></td>
        <td><span class="notranslate">the index of the fixture</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">state</span></td>
        <td><span data-keyref="Type_Bool">Booleano</span></td>
        <td><span class="notranslate">whether a fixture is a sensor (true) or not (false)</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">physics_fixture_set_sensor(fix_Cloud, 1);</p>
  <p>El código anterior convertirá el estado del sensor del accesorio indexado en &quot;fix_Cloud&quot; en verdadero.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Fixtures.htm">Instalaciones</a></div>
        <div style="float:right">Siguiente: <a href="physics_fixture_set_kinematic.htm"><span class="notranslate">physics_fixture_set_kinematic</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
physics_fixture_set_sensor
-->
  <!-- TAGS
physics_fixture_set_sensor
-->
</body>
</html>