<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Recogida de basura</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for the Garbage Collection functions" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Garbage Collection" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Recogida de basura</h1>
  <p>El <strong>recolector</strong> de basura de <span data-keyref="GameMaker Name">GameMaker</span> existe porque los métodos pueden ser pasados a la pila y dejados sin referencia, al igual que <span class="notranslate">structs</span> y algunas otras cosas, que a su vez causarían una fuga de memoria si no fueran &quot;limpiados&quot; de alguna manera. Aquí es donde entra el recolector de basura, que se ejecutará en el fondo del juego, recogiendo cualquier cosa que haya sido desreferenciada y manteniendo un uso óptimo de la memoria. Cuando hablamos de algo desreferenciado, generalmente nos referimos a cualquier <span class="notranslate">struct</span> o función que no esté conectada (no tiene que ser directamente, sino a través de una cadena de otras variables) a una variable <strong>global </strong>o a una <strong>variable de instancia de objeto</strong>. También hay que tener en cuenta que las funciones definidas en <span class="notranslate">scripts</span> en el <span class="notranslate">IDE</span> tampoco se recogen, ya que se hacen globales implícitamente.</p>
  <p class="note"><b>NOTA</b>: Ten en cuenta que cosas como las superficies, <span class="notranslate">data structures</span>, <span class="notranslate">buffers</span> y otros recursos dinámicos <b>no</b> se recogen de la basura y tienen sus propias funciones <span class="inline">destroy</span> para limpiar la memoria asociada a ellos. Como regla general, si cualquier cosa que crees en tiempo de ejecución tiene una función <span class="inline">destroy</span> entonces no será recolectada por la basura y tendrás que lidiar con ella tú mismo en el código. Las excepciones a esto son <span class="notranslate">sequences</span>, <span class="notranslate">animation curves</span> y las instancias, que también requieren el recolector de basura, <b>pero aún necesitan que se llame a su función de destrucción</b>.</p>
  <p>La recolección de basura que utiliza <span data-keyref="GameMaker Name">GameMaker</span> es &quot;generacional&quot;. Esto significa que, para reducir el trabajo que debe realizarse en cada fotograma, <span class="notranslate">objects</span> se divide en &quot;generaciones&quot;. Los nuevos <span class="notranslate">objects</span> se crean en la generación 0 y se trasladan a las generaciones anteriores a medida que envejecen. La idea general es que los <span class="notranslate">objects</span> que permanecen durante un tiempo no necesitan ser comprobados continuamente para ver si deben ser eliminados, sino que pueden ser comprobados con menos frecuencia (nótese que &quot;objetos&quot; aquí se refiere a cualquier cosa que pueda ser recogida de la basura y <i>no</i> a instancias generales de <span class="notranslate">object</span> como se define en el navegador <span class="notranslate">Asset</span> ). Ten en cuenta que mientras el sistema de comprobación es generacional, las comprobaciones reales se hacen de forma &quot;incremental&quot;, de forma que en lugar de limpiar potencialmente miles de <span class="notranslate">objects</span> de una generación en un solo fotograma - causando un gran pico en el uso de la CPU y afectando potencialmente a la jugabilidad - cada generación será comprobada y si es necesario la limpieza se extenderá a lo largo de múltiples fotogramas, de forma que el recolector de basura se ejecuta con más frecuencia pero hace menos trabajo en cada fotograma que está recogiendo (puedes establecer el tiempo objetivo que el recolector de basura debe pasar en cada fotograma usando la función <span class="inline"><a href="gc_target_frame_time.htm">gc_target_frame_time()</a></span>).</p>
  <p>En general, nunca deberías necesitar interactuar con el sistema de recolección de basura de <span data-keyref="GameMaker Name">GameMaker</span> y normalmente los resultados de su operación no son visibles, pero algunos comandos de <span class="notranslate">GML</span> están disponibles para obtener información sobre lo que el recolector está haciendo y para influir en su comportamiento hasta un grado limitado.</p>
  <p class="note"><b>¡IMPORTANTE!</b> Tenga en cuenta que en la plataforma de destino HTML5 la recolección de basura es manejada por el motor de JavaScript y por lo tanto ninguna de las funciones enumeradas a continuación afectará su operación y la función <span class="inline">gc_get_stats()</span> devolverá 0 para todos los campos.</p>
  <ul class="colour">
    <li><a href="gc_enable.htm"><span class="notranslate">gc_enable</span></a></li>
    <li><a href="gc_is_enabled.htm"><span class="notranslate">gc_is_enabled</span></a></li>
    <li><a href="gc_collect.htm"><span class="notranslate">gc_collect</span></a></li>
    <li><a href="gc_target_frame_time.htm">gc_target_frame_time</a></li>
    <li><a href="gc_get_target_frame_time.htm">gc_get_target_frame_time</a></li>
    <li><a href="gc_get_stats.htm"><span class="notranslate">gc_get_stats</span></a></li>
  </ul>
  <p> </p>
  <p>Para ayudar a decidir qué necesita ser recolectado por el recolector de basura y cuándo, también tienes unas cuantas funciones que pueden ser usadas para crear y comprobar <strong>referencias</strong> débiles a <span class="notranslate">structs</span>. Una referencia débil es una referencia que no protege a la <span class="notranslate">object</span> referenciada de la recolección por parte de un recolector de basura, por lo que se puede utilizar para comprobar si una <span class="notranslate">struct</span> sigue &quot;viva&quot; (referenciada) o no en algún lugar del juego. Las funciones disponibles para la referenciación débil son:</p>
  <ul class="colour">
    <li><a href="weak_ref_create.htm"><span class="notranslate">weak_ref_create</span></a></li>
    <li><a href="weak_ref_alive.htm"><span class="notranslate">weak_ref_alive</span></a></li>
    <li><a href="weak_ref_any_alive.htm"><span class="notranslate">weak_ref_any_alive</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../GML_Reference.htm">Referencia GML</a></div>
        <div style="float:right">Siguiente: <a href="../Variable_Functions/Variable_Functions.htm">Funciones variables</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
GML Reference
-->
  <!-- TAGS
gml_reference
-->
</body>
</html>