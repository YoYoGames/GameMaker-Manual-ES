<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>layer_script_begin</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function layer_script_begin" />
  <meta name="rh-index-keywords" content="layer_script_begin" />
  <meta name="search-keywords" content="layer_script_begin" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>layer_script_begin</h1>
  <p>Con esta función puedes asignar una función de <a href="../../../../GML_Overview/Script_Functions.htm">script</a> a una capa y será llamada antes de que la capa sea renderizada. Cuando se añade una función a una capa, de esta manera se ejecutará al inicio de <i>cada uno de los diferentes eventos de dibujo</i>, por lo que puede querer comprobar en la función asignada qué evento se está renderizando en ese momento y adaptar el código para que se ajuste. Esto se puede hacer comprobando el <a href="../../Objects/Object_Events/event_type.htm"><span class="inline">event_type</span></a> y/o el <a href="../../Objects/Object_Events/event_number.htm"><span class="inline">event_number</span></a> (ver el ejemplo ampliado más abajo). Tenga en cuenta que la función <i>no</i> está pensada para ser llamada en cualquier evento de dibujo o eventos de paso, sino que sólo necesita ser llamada al inicio de la <span class="notranslate">room</span> en el código de <strong>creación de</strong> la sala o en el <strong>evento de creación / </strong> <strong>evento de inicio de la sala</strong> de una instancia.</p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">layer_script_begin(layer_id, script);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td><span class="notranslate">layer_id</span></td>
        <td><span data-keyref="Type_String">Cadena</span> o <span data-keyref="Type_ID_Layer">ID de capa</span></td>
        <td><span class="notranslate">The unique ID value of the layer to target (or the layer name as a string)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">script</span></td>
        <td><span data-keyref="Type_Function_Script">Función del guión</span></td>
        <td><span class="notranslate">The script function index to assign to the layer</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Ejemplo ampliado:</h4>
  <p>En este ejemplo ampliado, primero mostraremos cómo se estructura una simple función de <span class="notranslate">script</span> para establecer algunos datos uniformes de <span class="notranslate">shader</span> para que cuando se dibuje la capa dada, esta función se ejecute y el <span class="notranslate">shader</span> trabaje correctamente. En el ejemplo, vale la pena notar cómo verificamos qué evento está siendo llamado para que el resto de la función sólo se ejecute en el evento específico en el que requerimos que trabaje - en este caso, sólo en el evento principal de dibujo:</p>
  <p class="code">/// @function layer_shader_start();<br />
    function layer_shader_start()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
                colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);<br />
                shader_set(s_ColourChanger);<br />
                shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
                shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
            }<br />
        }<br />
    }</p>
  <p>A continuación, tendríamos una función complementaria para restablecer la <span class="notranslate">shader</span> después de que se haya realizado todo el dibujo:</p>
  <p class="code">/// @function layer_shader_end();<br />
    function layer_shader_end()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                shader_reset();<br />
            }<br />
        }<br />
    }</p>
  <p>Ahora que hemos definido nuestras funciones <span class="notranslate">script</span> para establecer el <span class="notranslate">shader</span>, tenemos que asignarlas a una capa específica para que la capa sepa que debe llamarlas. Esto se haría en el código de creación de <span class="notranslate">room</span>, o en el evento de creación o de inicio de <span class="notranslate">room</span> de algún controlador <span class="notranslate">object</span> (no es necesario establecerlas en cada paso, sino una vez al inicio de <span class="notranslate">room</span>, o cuando la capa se crea inicialmente):</p>
  <p class="code">var lay_id = layer_get_id(&quot;Instances&quot;);<br />
    layer_script_begin(lay_id, layer_shader_start);<br />
    layer_script_end(lay_id, layer_shader_end);</p>
  <p>Este bloque de código final asigna la <span class="notranslate">scripts</span> a la capa.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="General_Layer_Functions.htm">Funciones generales de la capa</a></div>
        <div style="float:right">Siguiente: <a href="layer_script_end.htm"><span class="notranslate">layer_script_end</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_begin
-->
  <!-- TAGS
layer_script_begin
-->
</body>
</html>