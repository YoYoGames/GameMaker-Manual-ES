<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Sistema de retroceso</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Details for Rollback Multiplayer" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>Sistema de retroceso</h1>
  <p>Después de seguir el tutorial <a data-xref="{title}" href="Creating_Multiplayer.htm">Crear una partida multijugador</a>, es posible que tengas algunas preguntas sobre cómo funciona el sistema de retroceso. Esta página pretende ampliarlo.</p>
  <h2>¿Qué es el Rollback?</h2>
  <p>Es fácil experimentar lag cuando se juega en línea. Si juegas con alguien de forma remota, puede tardar una fracción de segundo en llegar a ti, pero incluso eso puede ser suficiente para arruinar tu experiencia de juego.</p>
  <p>Rollback utiliza predicciones para reducir el efecto del retraso. Basándose en entradas anteriores, predice lo que el otro usuario va a hacer a continuación, y te muestra el resultado de esa predicción, que es instantánea.</p>
  <p>Cuando la predicción es correcta, no experimentas lag, y tu juego se siente mucho más sensible.</p>
  <p>Sin embargo, a veces el sistema se da cuenta de que su predicción era errónea. En ese caso, <em>retrocede</em> al último estado correcto, y continúa la partida desde ese punto. Por eso se llama &quot;<strong>Rollback multiplayer</strong>&quot;.</p>
  <h3>Determinismo</h3>
  <p>Rollback es determinista. Sólo comparte entradas con otros jugadores, y espera que todos ellos ejecuten la misma lógica en la entrada dada, dando los mismos resultados en todos los clientes.</p>
  <p>Un enfoque diferente para el multijugador es la &quot;replicación de estado&quot;, que sincroniza continuamente el estado del juego entre los clientes, asegurando que siempre están haciendo lo mismo.</p>
  <p>Rollback no hace eso - sólo envía entradas, pero también mantiene un ojo en el estado para que pueda ser revertido en caso de una predicción errónea.</p>
  <p class="note"><em><strong>¿Qué es un cliente?</strong></em><br>
    <br>
    Un &quot;cliente&quot; es un jugador de tu juego, y se refiere a su copia del juego, que se ejecuta en su máquina.
  </p>
  <h2>¿Cómo funciona?</h2>
  <p>Como se ha mencionado anteriormente, Rollback <strong>sólo comunica la entrada</strong> entre los jugadores.</p>
  <p>Hay dos cosas principales que maneja Rollback:</p>
  <ul class="colour">
    <li><strong>Entradas</strong>: Las <a href="Rollback_Functions/rollback_define_input.htm">entradas</a> de cada jugador se envían a otros jugadores. Si el jugador 0 pulsa &quot; <strong>fuego</strong> &quot; en su propio cliente, Rollback se asegurará de que otros clientes también vean al jugador 0 pulsar <strong>&quot;fuego&quot;.</strong><br>
      <br>
     <strong>Las predicciones sólo se ejecutan en la entrada.</strong>
    </li>
    <li><strong>Estado</strong>: Esto incluye todos los <span class="notranslate">objects</span> gestionados y sus variables. Estas NO están sincronizadas entre jugadores: cambiar una variable en un cliente no la actualizará automáticamente en otro.<br>
      <br>
     <strong>El estado sólo se gestiona con el fin de ser revertido.</strong>
    </li>
  </ul>
  <h2>Entonces... ¿cuál es la diferencia?</h2>
  <p>La<strong>entrada</strong> cambia de <strong>estado</strong>, que es el concepto base del multijugador Rollback.</p>
  <p>He aquí un ejemplo:</p>
  <ul class="colour">
    <li><strong>Entrada</strong>: El jugador 0 pulsa <strong>&quot;fuego&quot;.</strong></li>
    <li><strong>Estado</strong>: Debido a que el jugador 0 presionó fuego, se crea un proyectil. Ese proyectil eventualmente choca con una roca. Esto hace que el jugador 0 obtenga un punto.<br>
      <br>
      Esto es esencialmente todo su juego, depende completamente de la entrada.
    </li>
  </ul>
  <p>&quot;<strong>Entrada</strong>&quot; es lo que comunica Rollback entre todos los jugadores, no el estado.</p>
  <p>Sin embargo, dado que todos los clientes del juego ejecutan la misma lógica sobre la entrada recibida (lo cual es un requisito), <strong>todos dan como resultado el mismo estado</strong>.</p>
  <p><img class="center" height="521" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/multiplayer_input_sync_explained.png" width="1096" /></p>
  <h2>¿Qué es entonces el Estado?</h2>
  <p>Si sólo se sincroniza la entrada, ¿para qué sirve <strong>el estado</strong>?</p>
  <p>Como la entrada afecta al estado, una predicción de entrada errónea puede dar lugar a un <strong>estado erróneo</strong>.</p>
  <p>Cuando el rollback encuentra que una predicción era errónea, reemplaza el estado actual con el estado correcto, y ejecuta las entradas y predicciones desde ese punto de nuevo. Esto incluye todos sus <span class="notranslate">objects</span> gestionados y sus variables.</p>
  <p>Esto no significa que Rollback esté sincronizando <span class="notranslate">objects</span> y las variables entre clientes. El hecho de que <span class="inline2">la variable_a</span> se establezca como <span class="inline2">&quot;Gurpreet&quot;</span> en un cliente, no significará que otros clientes también verán el mismo valor.</p>
  <p>Sólo verían el mismo valor para una variable si se derivara de la entrada de un jugador, o de algún otro sistema gestionado, como las alarmas y las funciones aleatorias.</p>
  <h2 id="h2">Objetos gestionados</h2>
  <p>Los objetos tienen una casilla de verificación &quot;<strong>Gestionado</strong>&quot;, que está activada por defecto para los nuevos <span class="notranslate">objects</span>:</p>
  <p><img>Los objetos marcados como gestionados tienen la capacidad de ser retrocedidos y de que se ejecuten predicciones sobre ellos, incluyendo todas sus variables, creación y destrucción.</p>
  <p>Todos los <span class="notranslate">objects</span> que formen parte de tu juego, como el jugador, el director/controlador <span class="notranslate">objects</span>, las recogidas de objetos, los proyectiles, etc. deben ser marcados como gestionados.</p>
  <p>Puedes desactivar esta opción para <span class="notranslate">objects</span> que no necesitan sincronizarse entre los jugadores, como el mundo estático <span class="notranslate">objects</span>, los visuales, los efectos, etc. que no afectan al juego de ninguna manera.</p>
  <p>Tenga en cuenta que la propiedad gestionada de un padre no se aplica a sus hijos de forma automática, por lo que cada hijo <span class="notranslate">object</span> necesita tener su casilla gestionada establecida manualmente.</p>
  <h2 id="h">Prueba de sincronización</h2>
  <p><span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> toma un argumento para la prueba de sincronización, que se activa por defecto (cuando no se especifica el argumento).</p>
  <p>La prueba de sincronización se utiliza para probar su juego fuera de línea. Si aparece algún problema de sincronización, te avisa imprimiendo el error en el registro de salida. Puedes utilizar Sync Test en <span class="notranslate">Windows</span>, macOS y Opera GX.</p>
  <p>La prueba de sincronización ejecuta todo el código del juego dos veces en un fotograma, para poder comprobar cualquier problema de sincronización. Esto significa que puedes ver que algunos eventos ocurren dos veces cuando pruebas fuera de línea, lo que no ocurrirá cuando tu juego se ejecute en línea.</p>
  <h3>Entrada aleatoria y simulada</h3>
  <p>Durante la prueba de sincronización, las instancias de reproductor &quot;remotas&quot; reciben valores de entrada aleatorios para sus <a href="Defining_Inputs.htm">entradas definidas</a>, como una forma sencilla de prueba. Puede desactivar esta función mediante <span class="inline"><a href="Rollback_Functions/rollback_use_random_input.htm">rollback_use_random_input()</a></span>.</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p class="video_subtitle">El segundo jugador está recibiendo entradas aleatorias durante la prueba de sincronización.</p>
  <p>También puede asignar una entrada simulada temporal a los reproductores remotos cuando esté en la prueba de sincronización. Para más detalles, consulte la sección sobre entradas <a data-xref="{text}" href="Defining_Inputs.htm#h1">simuladas</a>.</p>
  <h2>Desarrollar el multijugador con eficacia</h2>
  <p>Debe asegurarse de que todos los clientes del juego ejecutan la <strong>misma lógica</strong> cuando se recibe la <strong>misma entrada</strong>. Si una instancia particular fue creada o movida sólo para un cliente, no se reflejará en los otros clientes.</p>
  <p>Este problema generalmente no ocurre si usted programa su juego como se muestra en <a data-xref="{title}" href="Creating_Multiplayer.htm">Crear un Juego Multijugador</a>, con toda la lógica del jugador ejecutándose de la misma manera para todas las instancias del jugador sin importar si una instancia es <a href="Rollback_Variables/player_local.htm">local o no</a>. Sin embargo, si usted implementa una condición para hacer algo sólo para un jugador en particular, y no para otros, eso causará una interrupción en el estado del juego.</p>
  <h2 id="h1">Definición de un objeto reproductor</h2>
  <h3>Creación automática de instancias de jugadores</h3>
  <p>Como se muestra en <a data-xref="{title}" href="Creating_Multiplayer.htm">Crear una partida multijugador</a>, puedes definir un jugador <span class="notranslate">object</span> con <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Definir jugador (Rollback)</a> y el sistema creará automáticamente instancias del mismo para cada jugador conectado. También destruirá instancias para los jugadores que se desconecten.</p>
  <p>Las instancias de jugadores creadas de esta manera tienen sus IDs asignados automáticamente, en la variable <span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span>. Dentro de cada instancia de jugador, puedes simplemente llamar a <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> sin ningún argumento y te da las entradas para ese jugador en particular.</p>
  <p>Esta es la forma estándar de utilizar el sistema de retroceso, sin embargo, también puedes gestionar manualmente las instancias de los jugadores y sus entradas.</p>
  <h3>Creación manual de instancias de jugadores</h3>
  <p>Para gestionar manualmente las instancias de los jugadores, no llames a <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span>. Esto hará que el juego se inicie sin que se cree ninguna instancia de jugador.</p>
  <p>Entonces crea tus propias instancias de jugador manualmente, idealmente en el evento <a data-xref="{text}" href="Rollback_Events.htm#h">Rollback Start</a>, y dales IDs de jugador en una variable personalizada. Para obtener la entrada de un jugador, llame a <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> y especifica el ID del jugador como argumento. Llama a <a href="Rollback_Functions/rollback_get_info.htm"><span class="inline">rollback_get_info()</span></a> para obtener esas <a href="Rollback_Variables/Rollback_Variables.htm">variables</a> en un <span class="notranslate">struct</span> que de otro modo se asignarían a los jugadores automáticamente.</p>
  <p>De este modo, se puede gestionar manualmente cuándo y cómo se crean las instancias de los jugadores, los identificadores que se les asignan y la recuperación de la información de un jugador concreto.</p>
  <h3>Mantener vivas las instancias de los jugadores</h3>
  <p>Si estás usando <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Definir jugador (Rollback)</a>, no destruyas las instancias de jugador que se crean. Si necesitas mostrar a un jugador como derrotado, entonces cambia su <span class="notranslate">sprite</span>, o escóndelo usando algún otro método, pero mantén la instancia viva ya que es manejada por <span class="notranslate">GameMaker</span>.</p>
  <h2>Un solo jugador</h2>
  <p>El sistema de retroceso se puede utilizar cuando se crea una partida de un solo jugador. Basta con especificar <strong>1</strong> como número de jugadores al llamar a <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span>.</p>
  <p>De este modo, el sistema nunca se conectará a ninguna <span class="notranslate">servers</span> y su juego estará esencialmente fuera de línea, con la posibilidad de ampliarse a un juego multijugador en línea cuando lo desee.</p>
  <p>Adopta este enfoque cuando estés haciendo un nuevo proyecto que pueda hacer uso del multijugador en el futuro, ya que será más difícil implementar el multijugador en tu juego una vez que esté completado sin usar el sistema Rollback.</p>
  <h2 id="h4">Arranque manual vs. automático</h2>
  <p>Por defecto, una partida multijugador comienza en cuanto todos los jugadores se han unido. Sin embargo, puedes empezarla antes de ese momento llamando a <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.</p>
  <p>Puede desactivar completamente el comportamiento de autoinicio llamando a <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>. Esto significa que el juego esperará a que lo inicies manualmente.</p>
  <p>El inicio automático se desactiva automáticamente cuando <a href="Rollback_Functions/rollback_use_player_prefs.htm">se activan</a> las preferencias del jugador.</p>
  <p><span></span></p>
  <h2>Más información</h2>
  <p>Lea las siguientes páginas para obtener más información sobre el sistema Rollback:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Defining_Inputs.htm">Definición de las entradas</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">Restricciones de retroceso</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">Eventos de retroceso</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">Preferencias del jugador</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Atrás: <a data-xref="{title}" href="Rollback_Multiplayer.htm">Rollback Multiplayer</a></div>
        <div>Siguiente: <a data-xref="{title}" href="Defining_Inputs.htm">Definir las entradas</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
</body>
</html>