<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_write</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_write" />
  <meta name="rh-index-keywords" content="buffer_write,buffer_u8,buffer_s8,buffer_u16,buffer_s16,buffer_u32,buffer_s32,buffer_u64,buffer_f16,buffer_f32,buffer_f64,buffer_bool,buffer_string,buffer_text" />
  <meta name="search-keywords" content="buffer_write,buffer_u8,buffer_s8,buffer_u16,buffer_s16,buffer_u32,buffer_s32,buffer_u64,buffer_f16,buffer_f32,buffer_f64,buffer_bool,buffer_string,buffer_text" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>buffer_write</h1>
  <p>Esta función puede utilizarse para escribir datos en un <span class="notranslate">buffer</span> previamente creado. Los datos que escriba deben estar de acuerdo con el argumento &quot;tipo&quot; de esta función, lo que significa que no puede intentar escribir un <span class="notranslate">string</span> como un entero de 16 bits sin signo, por ejemplo. Las siguientes constantes se pueden utilizar para definir el tipo de datos:</p>
  <table>
    <colgroup>
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Buffer_Data_Type"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Reference/Buffers/buffer_write.htm">Tampón <span class="notranslate">Data Type</span> Constante</a></span></th>
      </tr>
      <tr>
        <th>Constante</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_u8</span></td>
        <td>Un entero de 8 bits sin signo. Es un valor positivo de 0 a 255.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_s8</span></td>
        <td>Un entero de 8 bits con signo. Puede ser un valor positivo o negativo de -128 a 127 (0 se considera positivo).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_u16</span></td>
        <td>Un entero de 16 bits sin signo. Es un valor positivo entre 0 y 65.535.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_s16</span></td>
        <td>Un entero de 16 bits con signo. Puede ser un valor positivo o negativo entre -32.768 y 32.767 (el 0 se considera positivo).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_u32</span></td>
        <td>Un entero de 32 bits sin signo. Es un valor positivo de 0 a 4.294.967.295.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_s32</span></td>
        <td>Un entero de 32 bits con signo. Puede ser un valor positivo o negativo entre -2.147.483.648 y 2.147.483.647 (el 0 se considera positivo).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_u64</span></td>
        <td>Un entero de 64 bits sin signo.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_f16</span></td>
        <td>Un flotador de 16 bits. Puede ser un valor positivo o negativo dentro del mismo rango que un entero con signo de 16 bits.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_f32</span></td>
        <td>Un flotador de 32 bits. Puede ser un valor positivo o negativo dentro del mismo rango que un entero con signo de 32 bits.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_f64</span></td>
        <td>Un flotador de 64 bits.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_bool</span></td>
        <td>Un valor booleano. Sólo puede ser 1 o 0 (<span class="inline">true</span> o <span class="inline">false</span>)</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_string</span></td>
        <td>Un <span class="notranslate">string</span> de cualquier tamaño, finalizado con un carácter de terminación nulo.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_text</span></td>
        <td>Un <span class="notranslate">string</span> de cualquier tamaño, sin el carácter final nulo.</td>
      </tr>
    </tbody>
  </table>
  <p>La función devolverá 0 si tiene éxito o -1 si falla.</p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">buffer_write(buffer, type, value)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td><span class="notranslate">buffer</span></td>
        <td><span data-keyref="Type_ID_Buffer"><a data-rhwidget="HyperlinkPopover" href="../../../../LINKGOESHERE">ID del búfer</a></span></td>
        <td><span class="notranslate">The index of the buffer to write to.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">type</span></td>
        <td><span data-keyref="Type_Real"><a data-rhwidget="HyperlinkPopover" href="../../../../LINKGOESHERE">Real</a></span></td>
        <td><span class="notranslate">The type of data that is to be written to the buffer (see the list of constants above).</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">value</span></td>
        <td><span data-keyref="Type_Real"><a data-rhwidget="HyperlinkPopover" href="../../../../LINKGOESHERE">Real</a></span></td>
        <td><span class="notranslate">The data to write.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code"><span data-keyref="Type_Real"><a data-rhwidget="HyperlinkPopover" href="../../../../LINKGOESHERE">Real</a></span> (0 if success, or -1 if it fails)</p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
    buffer_write(buff, buffer_s16, 0);<br />
    buffer_write(buff, buffer_s16, x);<br />
    buffer_write(buff, buffer_s16, y);</p>
  <p>El código anterior encuentra el inicio de la <span class="notranslate">buffer</span> con el id almacenado en la variable &quot;buff&quot; y escribe en ella una serie de valores enteros de 16 bits con signo.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Volver: <a href="Buffers.htm">Buffers</a></div>
        <div style="float:right">Siguiente: <a href="buffer_fill.htm"><span class="notranslate">buffer_fill</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
buffer_write
buffer_u8
buffer_s8
buffer_u16
buffer_s16
buffer_u32
buffer_s32
buffer_u64
buffer_f16
buffer_f32
buffer_f64
buffer_bool
buffer_string
buffer_text
-->
  <!-- TAGS
buffer_write
-->
</body>
</html>