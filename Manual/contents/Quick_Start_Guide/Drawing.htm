<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Dibujo</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code to show people how things are drawn." />
  <meta name="rh-index-keywords" content="Quick Start - Drawing" />
  <meta name="search-keywords" content="drawing,draw event,GUI layer" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Dibujo</h1>
  <p>Esta sección (y la siguiente sobre <a href="Movement_And_Controls.htm">Movimiento y Controles</a>) tiene como objetivo ofrecerte ejemplos prácticos de <span class="notranslate">GML</span> o <span class="notranslate">GML</span> Visual para que puedas empezar a hacer tus primeros proyectos de juego lo antes posible. No explicaremos las cosas con demasiada profundidad, ya que queremos que empieces a hacer cosas lo antes posible, así que te animamos a que explores los enlaces a medida que avanzas y a que utilices la función de &quot;búsqueda&quot; del manual para buscar información adicional sobre cualquier cosa de la que no estés seguro.</p>
  <p>En esta sección vamos a concentrarnos en dibujar simplemente información en la pantalla, tanto en forma de texto como de imágenes, y también explicaremos un poco más sobre los diferentes <strong>Eventos de Dibujo</strong>, específicamente, el evento principal de <strong>Dibujo</strong> y el evento de <strong>Dibujo de la GUI </strong>(ten en cuenta que en algunos de los ejemplos tendrás que añadir otros eventos, pero los explicaremos cuando lleguemos a ellos).</p>
  <p><img alt="The Draw Events" class="center" src="../assets/Images/QS_Guide/QS_DrawEvents.png" /></p>
  <p>Antes de seguir adelante, es posible que desee hacer un nuevo proyecto (ya sea <span class="notranslate">GML</span> o <span class="notranslate">GML</span> Visual) desde la <a href="../Introduction/The_Start_Page.htm">página de inicio</a>, y añadir (o crear) unos pocos <span class="notranslate">sprites</span>, así como un <span class="notranslate">object</span> o dos, ya que le daremos un poco de código que puede probar usando estos. ¡Incluso un cuadrado blanco funcionará por ahora como el <span class="notranslate">sprite</span> para nuestro <span class="notranslate">object</span>!</p>
  <p>Ahora, como se mencionó en la sección de <a href="Objects_And_Instances.htm">Objetos e Instancias</a>, si usted no agrega un Evento de Dibujo al <span class="notranslate">object</span>, entonces <span data-keyref="GameMaker Name">GameMaker</span> dibujará por defecto, lo que significa que si el <span class="notranslate">object</span> tiene un <span class="notranslate">sprite</span> asignado este <span class="notranslate">sprite</span> será dibujado, completo con cualquier transformación que haya sido agregada. ¿Qué queremos decir con transformaciones? Bueno, cada <span class="notranslate">object</span> tiene un número de<span class="glossextra">variables</span> incorporadas que controlarán cómo una instancia del <span class="notranslate">object</span> dibuja su <span class="notranslate">sprite</span> cuando se dibuja por defecto, y usted puede cambiar estas variables mientras el juego se ejecuta para cambiar la forma en que se dibuja el <span class="notranslate">sprite</span>.</p>
  <p class="note"><strong>NOTA</strong>: Puede encontrar una lista de todas las variables incorporadas que pueden utilizarse para transformar la instancia <span class="notranslate">sprites</span> <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm">aquí</a>. <span class="notranslate">GML</span> Los usuarios de Visual tienen algunas acciones dedicadas que afectan a estas variables, que puedes encontrar <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm">aquí</a>, y también puedes utilizar las propias variables junto con las acciones <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm">Get Instance Variable</a> y <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm">Set Instance Variable</a>.</p>
  <p>Veamos algunos ejemplos:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">Cambio de alfa (transparencia)</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">El valor <strong>alfa </strong>es lo que controla la transparencia de lo que se está dibujando, y en <span data-keyref="GameMaker Name">GameMaker</span>, usted puede usar la variable incorporada <span class="inline">image_alpha</span> para cambiar cuán transparente es el <span class="notranslate">sprite</span> asignado. Para ver cómo funciona esto, abra (o cree) un <span class="notranslate">object</span>, asígnele un <span class="notranslate">sprite</span>, y luego dele al <span class="notranslate">object</span> un <strong>Evento</strong> de Creación. En el evento de creación, simplemente añada el siguiente <span class="notranslate">GML</span> Visual o GML:</p>
    <p class="dropspot"><img alt="GML VisualDraw Example For Transparency" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_1.png" /></p>
    <p class="code">var _val = random(1);
      <br />
      image_alpha = _val;
    </p>
    <p class="dropspot">El alfa de la imagen se calcula como un valor de 0 a 1, donde 0 es totalmente transparente y 1 es totalmente opaco (por defecto se establece en 1). Así que en este ejemplo, todo lo que estamos haciendo es establecer el alfa de la imagen a un valor decimal aleatorio de 0 a 1. Coloque algunas instancias de este <span class="notranslate">object</span> en un <span class="notranslate">room</span>, y luego haga clic en el botón <strong>Play </strong> <img> en la parte superior del <span class="notranslate">IDE</span>.</p>
    <p class="dropspot">Debería ver que cada instancia del <span class="notranslate">object</span> dibuja su <span class="notranslate">sprite</span> con una transparencia diferente, por ejemplo:</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">Cambio de mezcla de colores (tintado)</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">Cuando su <span class="notranslate">object</span> está dibujando por defecto un <span class="notranslate">sprite</span>, este <span class="notranslate">sprite</span> se está dibujando en realidad <strong>mezclado </strong>(o <strong>teñido</strong>) con un color, y este valor de color se almacena en la variable incorporada <span class="inline">image_blend</span>. Por defecto, este color es blanco, lo que significa esencialmente que no se añadirá ningún color a <span class="notranslate">sprite</span> cuando se muestre en la pantalla. Sin embargo, puedes utilizar otros colores para conseguir efectos especiales, por ejemplo, utilizar el rojo para mostrar que la instancia ha recibido algún daño.</p>
    <p class="dropspot">En este ejemplo, vamos a mezclar diferentes colores con el <span class="notranslate">sprite</span> mientras se mantiene pulsada una tecla, por lo que tendrá que abrir (o crear) un <span class="notranslate">object</span>, asignarle un <span class="notranslate">sprite</span>, y luego dar a la <span class="notranslate">object</span> un <strong>Evento de Tecla Abajo &lt;Espacio&gt;</strong>.</p>
    <p class="dropspot"><img alt="Example Of Sprites Drawn With Different Alpha Values" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_1.png" /></p>
    <p class="dropspot">En este Key Down Event, añada el siguiente <span class="notranslate">GML</span> Visual o GML:</p>
    <p class="dropspot"><img alt="Add Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="code">var _col = choose(c_red, c_green, c_blue, c_yellow, c_fuchsia, c_orange);
      <br />
      image_blend = _col;
    </p>
    <p class="dropspot">Coloque unas cuantas instancias de este <span class="notranslate">object</span> en un <span class="notranslate">room</span>, y luego haga clic en el botón Play <img> en la parte superior del <span class="notranslate">IDE</span>, y pruebe a mantener pulsada y soltar la tecla <em>Espacio </em>. Deberías ver que cada instancia cambiará su color rápidamente mientras la tecla se mantiene pulsada, y dejará de cambiar cuando se suelte:</p>
    <p class="dropspot"><img alt="GML VisualExample Using Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_2.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">Cambio de escala</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Otra de las propiedades que podemos cambiar para nuestro <span class="notranslate">sprite</span> es el valor de <strong>la </strong>escala, permitiéndonos dibujarlo más grande o más pequeño cuando queramos. La escala se calcula de forma independiente a lo largo de los ejes X e Y mediante dos variables separadas, la variable <span class="inline">image_xscale</span> y la variable <span class="inline">image_yscale</span>. Por defecto están ajustadas a 1, y actúan como <strong>multiplicadores</strong>, por lo que un valor de 0,5 sería la mitad de la escala y un valor de 2 sería el doble de la escala.</p>
    <p class="note"><strong>¡IMPORTANTE! </strong>Si se cambia la escala asignada a <span class="notranslate">sprite</span> utilizando estas variables <strong>, también se cambiará el tamaño del cuadro delimitador para que coincida</strong>, lo que significa que el área de detección de colisiones para <span class="notranslate">sprite</span> también se escalará.</p>
    <p class="dropspot">En este ejemplo, vamos a utilizar algunas matemáticas simples para hacer que una instancia escale el <span class="notranslate">sprite</span> hacia arriba y hacia abajo en un <span class="notranslate">loop</span>. Para empezar, abre (o crea) un <span class="notranslate">object</span>, asígnale un <span class="notranslate">sprite</span>, y luego dale al <span class="notranslate">object</span> un evento <strong>Create</strong>. En este evento añade lo siguiente:</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">timer = 0;</p>
    <p class="dropspot">Ahora añada un <strong>evento de paso</strong> a la <span class="notranslate">object</span> con esto:</p>
    <p class="dropspot"><img alt="Example Showing Colour Blending" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_2.png" /></p>
    <p class="code">timer = timer + 1;
      <br />
      var _val = dsin(timer);
      <br />
      image_xscale = 1 + _val;
      <br />
      image_yscale = 1 + _val;
    </p>
    <p class="dropspot">Aquí estamos usando la función matemática <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"><span class="inline">dsin()</span></a> para generar un valor entre -1 y 1 usando la variable del temporizador, y luego aplicándolo a las variables de escala. Después de colocar algunas instancias en un <span class="notranslate">room</span> y pulsar el botón de <strong>reproducción </strong> <img>, debería ver cómo las instancias se escalan hacia arriba y hacia abajo desde una escala de 0 a una escala de 2 y luego de vuelta.</p>
    <p class="dropspot"><img alt="GML VisualSet Variable Example" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_1.png" /></p>
    <p class="dropspot">Una última cosa... ¡cambia la sección &quot; <span class="inline">image_yscale</span>&quot; por &quot; <span class="inline">1 - _val</span>&quot; y mira qué pasa!</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>Los ejemplos anteriores ilustran sólo algunas de las muchas maneras en que puede manipular el <span class="notranslate">object</span> <span class="notranslate">sprite</span> cuando <span data-keyref="GameMaker Name">GameMaker</span> está dibujando por defecto, pero ¿qué pasa si desea dibujar más de una cosa para un <span class="notranslate">object</span>? En esos casos es necesario utilizar el <strong>evento Draw</strong> para decirle explícitamente a <span data-keyref="GameMaker Name">GameMaker</span> lo que debe dibujar, que es lo que vamos a hacer en los siguientes ejemplos.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">Dibujar dos (o más) <span class="notranslate">Sprites</span> juntos</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">Para este ejemplo, necesitarás dos <span class="notranslate">sprites</span> y un <span class="notranslate">object</span>. Llame a los <span class="notranslate">sprites</span> &quot; <span class="inline">spr_One</span>&quot; y &quot; <span class="inline">spr_Two</span>&quot;, y luego fije el origen de &quot; <span class="inline">spr_One</span>&quot; en el centro y para &quot; <span class="inline">spr_Two</span>&quot; fije su origen en el centro-izquierda:</p>
    <p class="dropspot"><img>Asigne el primer <span class="notranslate">sprite</span> (&quot; <span class="inline">spr_One</span>&quot; con el origen central) al <span class="notranslate">object</span> que ha creado y luego añada un <strong>Evento</strong>de Creación. En el evento de creación añada el siguiente <span class="notranslate">GML</span> Visual o GML:</p>
    <p class="dropspot"><img alt="GML VisualActions To Change Sprite Scale" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_2.png" /></p>
    <p class="code">draw_angle = 0;</p>
    <p class="dropspot">Vamos a utilizar esta variable para rotar &quot; <span class="inline">spr_Two</span>&quot; en el tiempo, y dibujarla superpuesta sobre la <span class="notranslate">sprite</span> asignada a la <span class="notranslate">object</span> (&quot; <span class="inline">spr_One</span>&quot;). Para ello tenemos que añadir un <strong>Evento de Dib </strong>ujo al <span class="notranslate">object</span>. Al hacer esto le estamos diciendo a <span data-keyref="GameMaker Name">GameMaker</span> que queremos hacernos cargo de lo que dibuja la instancia, lo que significa que nuestro código incluirá una llamada a la función <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"><span class="inline">draw_self()</span></a> función o <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm"><strong>Dibujar uno mismo</strong></a> acción. Esta acción simplemente replica lo que el <span class="notranslate">object</span> hace cuando no hay un Evento de Dibujo presente y está por defecto dibujando el <span class="notranslate">sprite</span> asignado. Entonces dibujaremos el segundo <span class="notranslate">sprite</span> que queremos usar como la superposición <span class="notranslate">sprite</span> que está rotando. El <span class="notranslate">GML</span> Visual y el <span class="notranslate">GML</span> se ven así:</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">draw_self();
      <br />
      draw_angle = draw_angle + 0.5;
      <br />
      draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);
    </p>
    <p class="dropspot">Añada un número de instancias de <span class="notranslate">object</span> en el editor <span class="notranslate">room</span> y luego pulse el botón <strong>Play </strong> <img> en la parte superior del <a class="glossterm" data-glossterm="IDE" href="#">IDE</a>. Si todo ha ido correctamente deberías ver algo como esto ahora:</p>
    <p class="dropspot"><img class="center" src="../assets/Images/QS_Guide/QS_DrawExample_3.gif" title="Animation Showing Sprite Scaling" /></p>
    <p class="dropspot">Antes de dejar este ejemplo, vamos a retocarlo un poco y en lugar de hacer que &quot; <span class="inline">spr_Two</span>&quot; simplemente rote, haremos que apunte hacia la posición del ratón. Para ello tenemos que cambiar el evento de dibujo <span class="notranslate">GML</span> Visual o <span class="notranslate">GML</span> para que se vea así:</p>
    <p class="dropspot"><img alt="Show Origins For Sprites" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_1.png" /></p>
    <p class="code">draw_self();
      <br />
      draw_angle = point_direction(x, y, mouse_x, mouse_y);
      <br />
      draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);
    </p>
    <p class="dropspot">Vuelve a ejecutar el proyecto y esta vez verás algo muy diferente.</p>
    <p class="dropspot"><img>El <span class="notranslate">sprite</span> ahora apunta hacia el ratón independientemente de hacia dónde lo muevas. Como puedes ver, la superposición de <span class="notranslate">sprites</span> es una gran manera de añadir detalles a un <span class="notranslate">object</span> o de hacer que algo se mueva independientemente de la &quot;base&quot; <span class="notranslate">sprite</span> asignada al <span class="notranslate">object</span>, y es una poderosa herramienta que probablemente usarás mucho en tus propios proyectos.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down4" href="#">Dibujar cosas que no sean sprites</a></p>
  <div class="droptext" data-targetname="drop_down4">
    <p class="dropspot">Puedes dibujar cosas en el evento Draw que no sean <span class="notranslate">sprites</span> también, como texto, o formas. En este ejemplo, usaremos la función <span class="notranslate">GML</span> Visual o <span class="notranslate">GML</span> <span class="inline">draw_self()</span> para dibujar el <span class="notranslate">object</span> <span class="notranslate">sprite</span>, pero también dibujaremos otras cosas, empezando por algo de <strong>texto</strong>. Para este ejemplo, necesitarás un <span class="notranslate">sprite</span> y un <span class="notranslate">object</span> (con el <span class="notranslate">sprite</span> asignado). En el <span class="notranslate">object</span>, primero añade un <strong>Evento de Creación</strong> con este <span class="notranslate">GML</span> Visual o GML:</p>
    <p class="dropspot"><img alt="Set Draw Angle Variable In DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_1.png" /></p>
    <p class="code">name = choose(&quot;Fred&quot;, &quot;Jonas&quot;, &quot;Sharon&quot;, &quot;Kate&quot;, &quot;Frank&quot;, &quot;John&quot;, &quot;Monica&quot;, &quot;Amanda&quot;);
      <br />
      number = irandom(100);
    </p>
    <p class="dropspot">Todo lo que esto hace es decirle a <span data-keyref="GameMaker Name">GameMaker</span> que elija uno de los nombres de la lista y lo asigne a una variable, así como que genere un número aleatorio de 0 a 100 para cada instancia de la <span class="notranslate">object</span>. Queremos dibujar estos valores en la pantalla, y por lo tanto para eso necesitas ahora añadir un <strong>Evento de Dibujo</strong> y en él añadir el siguiente <span class="notranslate">GML</span> Visual o GML:</p>
    <p class="dropspot"><img alt="Draw Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_2.png" /></p>
    <p class="code">draw_self();
      <br />
      draw_set_halign(fa_center);
      <br />
      draw_text(x, y + 32, &quot;My name is &quot; + name);
      <br />
      draw_text(x, y + 48, &quot;My number is &quot; + string(number));
    </p>
    <p class="dropspot">Notarás que en el código anterior utilizamos la función <a href="../GameMaker_Language/GML_Reference/Strings/string.htm"><span class="inline">string()</span></a> función o <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm"><strong>Número a cadena</strong></a> en la variable &quot;número&quot; que queremos dibujar. Esto se debe a que todo el texto tiene que estar formado por <em>caracteres</em>, no por valores, y por lo tanto necesitamos usar esta función/acción para convertir el valor del número en los caracteres que queremos dibujar. En este caso estamos tomando el número aleatorio que generamos y convirtiéndolo en una &quot;cadena&quot; de caracteres que puede ser dibujada. También hay que tener en cuenta que establecemos la <strong>alineación</strong> del texto. Esto simplemente le dice a <span data-keyref="GameMaker Name">GameMaker</span> dónde comenzar a dibujar el texto en relación a la posición dada, y en este caso queremos que el texto esté centrado a lo largo del eje x.</p>
    <p class="dropspot">Añada un número de instancias de <span class="notranslate">object</span> en el editor de <span class="notranslate">room</span> y luego pulse el botón Play <img> en la parte superior de <span class="notranslate">IDE</span>. Debería ver algo como esto:</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="dropspot">En todos los ejemplos hasta ahora hemos dibujado el <span class="notranslate">sprite</span> asignado a la instancia, pero no siempre tiene que ser así. <strong>Puedes dibujar lo que quieras</strong> en el evento draw, independientemente del <span class="notranslate">sprite</span> asignado. Para ilustrar este punto, vamos a cambiar el código que tenemos actualmente eliminando la llamada a <span class="inline">draw_self()</span> y sustituyéndola por una función para dibujar una elipse de color, así:</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_2.gif" /></p>
    <p class="code">draw_ellipse_colour(x - 50, y - 32, x + 50, y + 32, c_fuchsia, c_lime, false);
      <br />
      draw_set_halign(fa_center);
      <br />
      draw_text(x, y + 32, &quot;My name is &quot; + name);
      <br />
      draw_text(x, y + 48, &quot;My number is &quot; + string(number));
    </p>
    <p class="dropspot">Ejecute el proyecto de nuevo y debería ver esto:</p>
    <p class="dropspot"><img alt="Edited Draw Code For Drawing Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_3.png" /></p>
    <p class="dropspot">Una cosa importante a tener en cuenta sobre esto, es que aunque no estemos dibujando el <span class="notranslate">sprite</span> asignado, se <strong>seguirá utilizando para la detección de col</strong>isiones. Por lo tanto, aunque estés dibujando una cosa, las colisiones se seguirán calculando en base al <span class="notranslate">sprite</span> asignado como si estuviera colocado en el <span class="notranslate">room</span> junto con la instancia, aunque no sea visible. Esto es bastante práctico en realidad, ya que significa que puedes dibujar diferentes <span class="notranslate">sprites</span>, pero mantener una única <strong>máscara de</strong> colisión basada en el <span class="notranslate">sprite</span> asignado. También hay que tener en cuenta que puedes seguir aplicando las diferentes transformaciones como la escala X/Y, y las colisiones se basarán en el cambio de tamaño, aunque no se dibuje nada para mostrarlo.</p>
  </div>
  <p> </p>
  <p> </p>
  <h1>La capa de la interfaz gráfica de usuario</h1>
  <p>Mencionamos al principio de la página que hablaríamos del Evento Draw <strong>GUI</strong> así como del Evento Draw, así que veamos eso ahora. El evento Draw GUI funciona en algo llamado la capa <strong> <a class="glossterm" data-glossterm="GUI" href="#">GUI</a></strong>, que es una capa de dibujo especial de una anchura y altura fijas que se dibuja sobre las instancias en el <span class="notranslate">room</span>. Lo bueno de la capa GUI es que <em> no se mueve con la cámara del <span class="notranslate">room</span> </em>, así que es el lugar ideal para añadir elementos estáticos de la GUI, como puntuaciones, barras de salud y otra información que tu juego necesita comunicar al usuario. Puedes encontrar más información sobre la capa GUI en la sección de <a href="../The_Asset_Editors/Object_Properties/Draw_Events.htm">Eventos de Dibujo</a> del manual.</p>
  <p class="note"><strong>NOTA</strong>: <span class="notranslate">Rooms</span> puede ser más grande que el tamaño de la pantalla, por lo que puedes tener grandes niveles para que el jugador se mueva. Esto significa que en el Editor de <span class="notranslate">Room</span> (o en el código) necesitas definir una <strong>cámara </strong>que siga la acción de tu juego. Esto es básicamente una manera de establecer un área fija de la pantalla para mostrar diferentes partes del <span class="notranslate">room</span> más grande basado en - por ejemplo - la posición del jugador en el <span class="notranslate">room</span>, y se utiliza en un montón de juegos. Piensa en la forma en que la vista sigue siempre al protagonista en juegos clásicos como Mario o Zelda. Eso se hace con cámaras. Para más información, vea la sección <a href="../The_Asset_Editors/Room_Properties/Room_Properties.htm">Propiedades de la sala</a> en la sección del editor <span class="notranslate">Room</span> del manual.</p>
  <p>Todos los siguientes ejemplos van a utilizar el evento <strong>Draw GUI</strong>, así que tendrás que crear un <span class="notranslate">object</span> y añadirle ese evento. Ten en cuenta que el <span class="notranslate">object</span> no necesita que se le asigne un <span class="notranslate">sprite</span>, ya que no queremos dibujar nada por defecto, ni necesitamos que detecte colisiones. <span class="notranslate">Objects</span> como éste, que sólo están diseñados para dibujar cosas o controlar ciertos aspectos del juego, suelen llamarse <strong>Objetos Controladores</strong>. Ten en cuenta también que utilizaremos el mismo <span class="notranslate">object</span> para todos los ejemplos, por lo que te recomendamos que los repases uno tras otro (aunque no es estrictamente necesario).</p>
  <p><img> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down5" href="#">Texto para dibujar</a></p>
  <div class="droptext" data-targetname="drop_down5">
    <p class="dropspot">Al dibujar en la capa GUI, la esquina superior izquierda es la posición de origen, y a la derecha es +X y abajo es +Y. Esto hace que el posicionamiento del texto y los gráficos sea muy fácil, como verás en este ejemplo. Todo lo que vamos a hacer aquí es dibujar un valor que represente la puntuación del jugador, así que en nuestro <span class="notranslate">object</span> necesitaremos añadir un <strong>evento Create </strong>para inicializar una variable que contenga este valor, así:</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Pointing At Mouse" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_3.gif" /></p>
    <p class="code">player_score = 0;</p>
    <p class="dropspot">También queremos añadir un <strong>Evento de Teclado Abajo &lt;Espacio&gt;</strong> al <span class="notranslate">object</span>, ya que lo usaremos para incrementar la puntuación cada vez que se presione la tecla Espacio.</p>
    <p class="dropspot"><img alt="Setting Variables Using DnD" class="center" height="506" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1_1.png" width="317" /></p>
    <p class="dropspot">En este caso añade lo siguiente:</p>
    <p class="dropspot"><img alt="Drawing Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1.png" /></p>
    <p class="code">var _val = irandom(100);
      <br />
      player_score = player_score + _val;
    </p>
    <p class="dropspot">Finalmente, dibujemos el valor de la puntuación en el evento Draw GUI, así:</p>
    <p class="dropspot">En este caso añade lo siguiente:</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">draw_set_halign(fa_left);
      <br />
      draw_set_colour(c_yellow);
      <br />
      draw_text(32, 32, &quot;SCORE:&quot;);
      <br />
      draw_set_colour(c_white);
      <br />
      var _str = string(player_score);
      <br />
      draw_text_transformed(32, 48, _str, 2, 2, 0);
    </p>
    <p class="dropspot">Notarás que hemos utilizado valores <a class="glossterm" data-glossterm="codificado" href="#">fijos</a> para la posición x/y del texto a dibujar, ya que no necesitamos que sea relativo a ninguna instancia, ya que estamos dibujando en la capa de la GUI. También hemos utilizado la función &quot;set colour&quot; para cambiar el color del texto, así como la función &quot;transformed&quot; para hacer más grande el valor de la puntuación real, lo que ilustra cómo puedes ir personalizando los elementos de texto en tus propios juegos.</p>
    <p class="dropspot">Añade ahora una única instancia de este <span class="notranslate">object</span> a tu <span class="notranslate">room</span> y luego pulsa el botón <strong>Play </strong> <img>. Cuando el juego se ejecute pulse y suelte la tecla <span class="inline">&lt;Space&gt;</span> y debería ver que el valor de la puntuación aumenta.</p>
    <p class="dropspot"><img alt="Sprites Being Drawn Along With Text" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_1.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down6" href="#">Dibujar Sprites</a></p>
  <div class="droptext" data-targetname="drop_down6">
    <p class="dropspot">En este ejemplo, vamos a utilizar la capa GUI para dibujar algunos <span class="notranslate">sprites</span>. ¡El uso más obvio para esto es dibujar las vidas de los jugadores, así que vamos a seguir adelante y hacer precisamente eso! Necesitarás un <span class="notranslate">sprite</span> para este ejemplo - que debería ser de unos 64x64 píxeles - pero no debería ser asignado al <span class="notranslate">object</span>, ya que lo dibujaremos nosotros mismos.</p>
    <p class="dropspot">Para empezar, tenemos que añadir algunas variables nuevas a la <span class="notranslate">object</span> en el <strong>evento Create</strong> (si has hecho el ejemplo anterior, añade lo siguiente debajo de lo que ya hay):</p>
    <p class="dropspot"><img alt="Drawing Shapes Along With Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_2.png" /></p>
    <p class="code">player_lives = 3;
      <br />
      gui_w = display_get_gui_width();
    </p>
    <p class="dropspot">En este código inicializamos una variable para las vidas de los jugadores, pero también creamos una variable para mantener el ancho de la capa de la GUI, para que podamos posicionar las cosas correctamente en relación a la derecha de la pantalla. Podríamos simplemente codificar un valor en el código y utilizarlo, pero eso significaría que si hacemos cualquier cambio en el tamaño de la <span class="notranslate">room</span>, o si añadimos cámaras, etc... más tarde, entonces tendríamos que ir a través del código y cambiar el valor en todas partes. El uso de la función <a href="../GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"><span class="inline">display_get_gui_width()</span></a> significa que no tenemos que preocuparnos por ningún cambio futuro como ese, ya que el código se adaptará automáticamente a cualquier tamaño de la capa de la GUI.</p>
    <p class="dropspot">A continuación queremos añadir un <strong>Evento de Teclado Pulsado &lt;Enter&gt;</strong> a <span class="notranslate">object</span>, ya que lo utilizaremos para cambiar el número de vidas cada vez que se pulse la tecla Enter:</p>
    <p class="dropspot"><img alt="Example Of Drawing Shapes And Text Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_2.png" /></p>
    <p class="dropspot">En este caso añade lo siguiente:</p>
    <p class="dropspot"><img alt="Draw GUI Event In An Object" class="center" src="../assets/Images/QS_Guide/QS_DrawGUIObject.png" /></p>
    <p class="code">player_lives = player_lives - 1;
      <br />
      <br />
      if player_lives &lt; 0
      <br />
      {
      <br />
      player_lives = 3;
      <br />
      }
    </p>
    <p class="dropspot">Finalmente, necesitamos dibujar el <span class="notranslate">sprites</span> en la pantalla. Para esto usaremos un &quot; <span class="inline">for</span>&quot; <span class="notranslate">loop</span> (información usando <span class="notranslate">GML</span> <a href="../GameMaker_Language/GML_Overview/Language_Features/for.htm">aquí</a> y para <span class="notranslate">GML</span> Visual <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm">aquí</a>), junto con la variable GUI width para posicionar todo en la esquina superior derecha de la pantalla. Por lo tanto, añada esto en el evento Draw Gui (después de cualquier otra acción que pueda tener de los ejemplos anteriores):</p>
    <p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_1.png" /></p>
    <p class="code">for (var i = 0; i &lt; player_lives; i += 1)
      <br />
      {
      <br />
      var _xx = gui_w - 48 - (i * 70);
      <br />
      draw_sprite(spr_Heart, 0, _xx, 48);
      <br />
      }
    </p>
    <p class="dropspot">Si aún no has añadido una instancia de este <span class="notranslate">object</span> a un <span class="notranslate">room</span>, sigue adelante y añádelo ahora (¡sólo uno!), luego pulsa el botón <strong>Play </strong> <img>. Una vez que el juego esté en marcha pulsa la tecla <span class="inline">&lt;Enter&gt;</span> varias veces para ver cómo cambian las vidas.</p>
    <p class="dropspot"><img alt="Adding A Space Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="dropspot">Antes de dejar este ejemplo, deberías experimentar con el número de vidas y ver qué pasa. Por el momento está establecido en 3, pero cambia el evento Create y el evento Key Pressed para establecer el valor en 5, o 10... si has hecho todo bien, ¡el código debería adaptarse y dibujarlas todas correctamente!</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down7" href="#">Dibujar una barra de salud</a></p>
  <div class="droptext" data-targetname="drop_down7">
    <p class="dropspot">Este ejemplo final cubre el dibujo de una barra de salud a la capa de la GUI. Hay un número de maneras que esto se puede hacer, pero <span data-keyref="GameMaker Name">GameMaker</span> tiene una función incorporada específicamente para hacer barras de salud, así que eso es lo que vamos a utilizar aquí, aunque usted puede crear su propio uso de <span class="notranslate">sprites</span> o formas también. Para empezar, como antes, tenemos que inicializar un varaible para mantener el valor de la salud, por lo que añadir el siguiente <span class="notranslate">GML</span> Visual o <span class="notranslate">GML</span> en el <strong>evento de creación</strong> de la <span class="notranslate">object</span> (después de cualquier otro código que ya puede estar allí):</p>
    <p class="dropspot"><img alt="GML VisualActions In The Space Key Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_2.png" /></p>
    <p class="code">player_health = 100;</p>
    <p class="dropspot">Queremos utilizar las teclas de flecha para cambiar el valor de la salud hacia arriba o hacia abajo dependiendo de la tecla de flecha que se pulse, y podríamos hacerlo añadiendo dos eventos de <strong>Teclado Pulsado &lt;Flecha&gt;</strong>, sin embargo, es probablemente más fácil utilizar un <strong>Evento</strong> de Paso y algo de código para comprobar las teclas, así que adelante y añade un <strong>Evento de Paso</strong> ahora con el siguiente <span class="notranslate">GML</span> Visual o GML:</p>
    <p class="dropspot"><img alt="Drawing Text To The GUI Layer Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_3.png" /></p>
    <p class="code">if keyboard_check(vk_up)<br />
      {<br />
          if (player_health &lt; 100) <br />
          {<br />
              player_health = player_health + 1;<br />
          }<br />
      }<br />
      <br />
      if (keyboard_check(vk_down)) <br />
      {<br />
          if (player_health &gt; 0) <br />
          {<br />
              player_health = player_health - 1;<br />
          }<br />
      }
    </p>
    <p class="dropspot">Una vez hecho esto, podemos pasar a dibujar la barra de salud, lo que se hace en el evento Draw GUI, añadiendo lo siguiente (después de cualquier otra cosa que ya esté ahí):</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">var _xx = display_get_gui_width() / 2;<br />
      <br />
      draw_healthbar(_xx - 50, 24, _xx + 50, 40, player_health, c_black, c_red, c_lime, 0, true, true);
    </p>
    <p class="dropspot">Añade una instancia de este <span class="notranslate">object</span> a un <span class="notranslate">room</span> si aún no lo has hecho (¡sólo uno!), y luego pulsa el botón <strong>Play </strong> <img>. Una vez que el juego esté en marcha, pulsa las teclas <span class="inline">&lt;Up Arrow&gt;</span> y <span class="inline">&lt;Down Arrow&gt;</span> varias veces para ver cómo cambia la salud.</p>
    <p class="dropspot"><img alt="Animation Showing Text Being Drawn To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_6.gif" /></p>
  </div>
  <p> </p>
  <p>Esperamos que después de hacer estos ejemplos tengas un poco más de confianza al usar <span data-keyref="GameMaker Name">GameMaker</span> y un poco más de comprensión de cómo funciona todo. La siguiente sección explorará cómo hacer que estas cosas que has estado dibujando se muevan alrededor de <span class="notranslate">room</span> así como aceptar - y responder a - la entrada del usuario.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Volver: <a href="../Content.htm">Index</a></div>
        <div style="float:right">Siguiente: <a href="Movement_And_Controls.htm">Movimiento y controles</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Drawing
Drawing Examples
Quick Start Drawing
-->
  <!-- TAGS
qs_drawing
-->
</body>
</html>