<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guía de primitivos y construcción de vértices</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guía para la construcción de primitivos y <span class="notranslate">Vertex</span> </h1>
  <p>Esta guía cubre brevemente cómo construir y utilizar <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">primitivas</a> usando <strong>formatos de vértices</strong> personalizados y <strong>buffers de vértices</strong>. </p>
  <p>En general, cuando se empieza a trabajar con 3D, efectos especiales, procesos de dibujo complejos o <span class="notranslate">shaders</span> no hay que preocuparse demasiado por el formato <span class="notranslate">vertex</span> que se utiliza, ya que <span data-keyref="GameMaker Name">GameMaker</span> configurará y pasará automáticamente los datos de <a class="glossterm" data-glossterm="vértice" href="#">vértices</a> por ti. Sin embargo, a veces es necesario crear tus propios datos de <span class="notranslate">vertex</span> y formatearlos a tu gusto, especialmente cuando necesitas aumentar la velocidad, o deseas pasar información extra. Por ejemplo, el formato estándar de <span class="notranslate">vertex</span> incluye una posición 3D x, y, z, color (con alfa), y coordenadas de textura UV, que, si lo crearas tú mismo, sería algo así:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Sin embargo, si sólo está utilizando (por ejemplo) un <span class="notranslate">shader</span> para manipular la posición del <span class="notranslate">vertex</span>, entonces no habría necesidad de pasar por los datos de color o textura. En este caso, usted crearía su propio formato así:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    my_format = vertex_format_end();</p>
  <p>En total hay cinco atributos diferentes de <span class="notranslate">vertex</span> que puede utilizar al definir un formato <span class="notranslate">vertex</span>:</p>
  <ul class="colour">
    <li>Color</li>
    <li>Normal</li>
    <li>Posición</li>
    <li>Posición 3D</li>
    <li>Coordenada de la textura</li>
  </ul>
  <p>En general, <em>siempre</em> debe proporcionar la posición o la posición 3D como parte del formato, pero todos los demás son opcionales.</p>
  <p>Debes tener en cuenta que una vez que hayas creado tu formato <span class="notranslate">vertex</span>, el orden en el que hayas definido los atributos <span class="notranslate">vertex</span> <i>debe ser respetado</i> al construir tus <strong>primitivas</strong>. Así, si has definido un formato <span class="notranslate">vertex</span> como posición, color y coordenada de textura, entonces <b> <i>debes</i></b> añadir estos atributos a la primitiva en el mismo orden, de lo contrario obtendrás un error. También hay que tener en cuenta que, como cualquier otro recurso dinámico, un formato <span class="notranslate">vertex</span> requiere memoria y, por lo tanto, debe eliminarse cuando no se necesite utilizando la función <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><span class="inline">vertex_format_delete()</span></a>.</p>
  <p>Las primitivas que construyas se guardan en un <b>buffer de vértices</b>. Este debe ser creado de antemano y luego referenciado por las funciones que se utilizan para construir su primitiva. El <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> puede ser reutilizado tantas veces como sea necesario para crear diferentes primitivas, o puede ser &quot;congelado&quot; para mantener un tipo específico de primitiva durante la duración de tu juego o nivel (que es el enfoque más rápido, por lo que si sabes que una primitiva que construyes no va a cambiar, entonces siempre debes utilizar esta opción).</p>
  <p>En el siguiente código se muestra un ejemplo de construcción de una primitiva de triángulo simple:</p>
  <p class="code">// CREATE EVENT<br />
    v_buff = vertex_create_buffer();<br />
    vertex_begin(v_buff, global.my_format);<br />
    vertex_position(v_buff, 10, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 0, 0);<br />
    vertex_position(v_buff, 110, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 0);<br />
    vertex_position(v_buff, 110, 110);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 1);<br />
    vertex_end(v_buff);</p>
  <p class="code_heading">Draw Event</p>
  <p class="code"><br />
    var tex = sprite_get_texture(spr_Background, 0);<br />
    shader_set(shd_shimmer);<br />
    vertex_submit(v_buff, pr_trianglelist, tex);<br />
    shader_reset();
  </p>
  <p>Aquí primero hemos creado nuestro vértice <span class="notranslate">buffer</span> en el evento Create de la instancia, luego comenzamos la definición de los diferentes vértices que componen nuestra primitiva triangular, dando la posición, el color, y la coordenada UV de la textura para cada uno de los tres puntos que queremos utilizar. Luego terminamos la definición de <span class="notranslate">vertex</span>, y sabemos que el <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> con estos datos <span class="notranslate">vertex</span> se almacena en la variable &quot;v_buff&quot;.  </p>
  <p class="note"><strong>NOTA</strong>: Si el contenido de <span class="notranslate">buffer</span> se va a actualizar constantemente, el <span class="notranslate">buffer</span> se crearía, se le darían los datos de <span class="notranslate">vertex</span>, y luego se destruiría de nuevo - después de haber sido dibujado - todo en el mismo paso.</p>
  <p>A continuación, dibujamos el contenido del <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> en el evento de dibujo utilizando un <span class="notranslate">shader</span>. Este es un ejemplo muy simple, y es básicamente cómo <span data-keyref="GameMaker Name">GameMaker</span> trabaja internamente, es decir: Cuando se dibuja un <span class="notranslate">sprite</span>, <span class="notranslate">GameMaker</span> crea un <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> con cuatro vértices creando dos triángulos (que hacen un cuadrado, también llamado &quot;quad&quot;), y texturiza estos dos triángulos con la imagen <span class="notranslate">sprite</span>. Cuando dibujamos este <span class="notranslate">sprite</span>, estamos presentando el <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> y su contenido se dibuja en la pantalla.</p>
  <p>Observará que cuando enviamos el <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> para su dibujo, suministramos un tipo de primitiva. El tipo de primitiva que utilices puede ser un punto, una lista o tira de líneas, o una lista o tira de triángulos, pero <i>no</i> se permiten los abanicos de triángulos ya que la mayoría del hardware móvil no acepta ese tipo de primitiva. No olvides formatear tu <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> correctamente para el tipo de primitiva que se va a utilizar para dibujarla. Por ejemplo, dibujar una primitiva de dos triángulos como lista de triángulos requiere 6 puntos, pero como tira de triángulos sólo requiere 4 puntos. El tipo que utilices depende de lo que quieras dibujar y del efecto que quieras conseguir.</p>
  <p>Un último punto importante a tener en cuenta cuando se utiliza su propio <span class="notranslate">vertex</span> <span class="notranslate">buffers</span> de esta manera es cómo afecta a los lotes de vértices que se envían a la GPU. Cuando creas un <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> estás creando el nivel más bajo de datos gráficos, así que cuando dibujas todo lo que sucede es que <span data-keyref="GameMaker Name">GameMaker</span> envía tu <span class="notranslate">buffer</span> directamente a la tarjeta gráfica. Debido a esto, si quieres un mejor batching, debes trabajarlo tú mismo y almacenar las cosas que quieres batchear dentro del mismo <span class="notranslate">buffer</span>.</p>
  <p>Como ya hemos mencionado anteriormente, los formatos de <span class="notranslate">vertex</span> se construyen utilizando conjuntamente los siguientes 5 tipos de atributos (añadidos a través de la función apropiada <span class="inline">vertex_format_add_*</span> ):</p>
  <ul class="colour">
    <li>Color</li>
    <li>Normal</li>
    <li>Posición</li>
    <li>Posición 3D</li>
    <li>Coordenadas de la textura</li>
  </ul>
  <p>Dentro del GLSL ES <span class="notranslate">shader</span>, estos tipos se reconocen utilizando los siguientes 4 atributos:</p>
  <ul class="colour">
    <li>Color</li>
    <li>Normal</li>
    <li>Posición</li>
    <li>Coordenadas de la textura</li>
  </ul>
  <p>Ahora bien, esto puede parecer extraño, ya que parece que podemos especificar más tipos de atributos en nuestro formato <span class="notranslate">vertex</span> que en el <span class="notranslate">vertex</span> <span class="notranslate">shader</span>. Sin embargo, en el <span class="notranslate">shader</span> la <i>Posición</i> y la <i>Posición 3D</i> se tratan como el <em>mismo </em>atributo, excepto que se espera que <i>la Posición</i> tenga sólo coordenadas &quot;x&quot; e &quot;y&quot; mientras que la <i>Posición 3D</i> tiene coordenadas &quot;x&quot;, &quot;y&quot; y &quot;z&quot;. Entonces, ¿cómo se relaciona lo que está en su formato <span class="notranslate">vertex</span> con la forma de definir los atributos en su <span class="notranslate">shader</span>? Empecemos por ver un conjunto típico de atributos del shader por defecto:</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position;        // (x,y,z)<br />
    //attribute vec3 in_Normal;        // (x,y,z) unused in this shader.<br />
    attribute vec4 in_Colour;          // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;    // (u,v)</p>
  <p>Y aquí hay un trozo de código que configura un formato <span class="notranslate">vertex</span> compatible con este shader:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Ahora bien, ¿cómo se hace coincidir el atributo <span class="notranslate">shader</span> con el tipo de formato <span class="notranslate">vertex</span>? Sólo se basa en la convención de nombres:</p>
  <ul class="colour">
    <li><span class="inline">&quot;in_Position&quot;</span> mapas a <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">&quot;in_Colour&quot;</span> mapas a <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">&quot;in_TextureCoord&quot;</span> mapas a <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span> Ahora, las cosas se complican cuando tienes múltiples atributos del mismo tipo, pero las cosas siguen basándose en la misma convención de nombres. Ahora veremos cómo suministrar <b>coordenadas</b> adicionales de <b>color</b> y <b>textura</b>, ya que sólo puede haber <b>un</b> atributo de Posición y <b>uno</b> de Normal en el formato <span class="notranslate">shader</span> o <span class="notranslate">vertex</span>, pero <em>puede</em> haber múltiples atributos de color o textura.</p>
  <p>Cuando se añaden atributos de color adicionales a su <span class="notranslate">shader</span>, es necesario añadir un número al final del atributo <span class="notranslate">shader</span> para indicar a qué entrada concreta del formato <span class="notranslate">vertex</span> corresponde el atributo. He aquí un ejemplo: primero el formato <span class="notranslate">vertex</span>:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Y ahora los atributos asociados <span class="notranslate">shader</span>:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour0;       // (r,g,b,a)<br />
    attribute vec4 in_Colour1;       // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;  // (u,v)</p>
  <p>En este caso, <span class="inline">in_Colour0</span> se asigna al primer <span class="inline">vertex_format_add_colour()</span> y <span class="inline">in_Colour1</span> al segundo.</p>
  <p>Las coordenadas de textura se manejan de forma ligeramente diferente al color. Básicamente, cualquier cosa que no se llame <span class="inline">in_Position</span>, <span class="inline">in_Normal</span> o uno de los atributos <span class="inline">in_Colour[0 ... ]</span> se trata como una coordenada de textura. El orden en que se definen, en la lista de atributos de <span class="notranslate">shader</span>, es lo que denota a qué atributo del formato <span class="notranslate">vertex</span> se asignan. Véase el siguiente ejemplo de <span class="notranslate">GML</span>:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Y el código <span class="notranslate">shader</span> sería algo así:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour;        // (r,g,b,a)<br />
    attribute vec2 in_myTexcoord;    // (u,v)<br />
    attribute vec2 in_TextureCoord;  // (u,v)<br />
    attribute vec2 in_Something;     // (u,v)</p>
  <p>En este ejemplo, <span class="inline">in_myTexcoord</span>, <span class="inline">in_TextureCoord</span> y <span class="inline">in_Something</span> se asignan a los tres atributos de coordenadas de textura sucesivos definidos en el formato <span class="notranslate">vertex</span>.</p>
  <p>En la siguiente página encontrará una lista completa de todas las funciones necesarias para crear formatos, <span class="notranslate">vertex</span> <span class="notranslate">vertex</span> y primitivas de <span class="notranslate">buffers</span>:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitivas y <span class="notranslate">Vertex</span> Formatos</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Additional_Information.htm">Información adicional</a></div>
        <div style="float:right">Siguiente: <a href="Guide_To_Using_Blendmodes.htm">Guía de uso de Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>