<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Buenas prácticas de programación</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Buenas prácticas de programación</h1>
  <p>En esta página vamos a cubrir algunas &quot;mejores prácticas&quot; a la hora de programar tu juego, y al mismo tiempo explicaremos un poco el funcionamiento interno de <span data-keyref="GameMaker Name">GameMaker</span>. Antes de continuar, sin embargo, vale la pena señalar dos puntos muy importantes:</p>
  <ul class="colour">
    <li>Esto es una <em>guía</em>, y no el método definitivo y 100% perfecto para escribir tu juego. Las cosas que se mencionan aquí están, en general, más en la escala de la organización y la micro-optimización y deberían incorporarse a tus hábitos de programación cuando te sientas cómodo con <span class="notranslate">GML</span> y creas que son apropiadas.</li>
    <li>Si tu juego funciona bien y estás contento con las cosas tal y como están, <em>no te apresures a cambiar todo sólo para exprimir unos pocos FPS extra</em>. Tienes que encontrar un equilibrio entre un código legible, flexible y modular con el tiempo y la energía necesarios para cambiar las cosas, así como la ganancia general al final. Básicamente, si no está roto, no lo arregles y guarda lo que aprendas aquí para tu próximo proyecto.</li>
  </ul>
  <p>Dicho esto, pasemos a ver algunos consejos generales para escribir un buen código <span class="notranslate">GML</span> que puedes aplicar en cualquier momento...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Estilo de programación</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Cuando se trata de escribir código, todo el mundo tiene un <em>estilo</em>. El estilo con el que programas es la forma en que colocas los corchetes, cómo sangras las líneas y cómo declaras y nombras las variables, etc., y es esencial para que tu código sea claro y legible para otras personas (y para tu futuro yo, cuando tengas que volver a este proyecto después de un tiempo en otra cosa).</p>
    <p class="dropspot">Hay muchos, muchos <a href="http://en.wikipedia.org/wiki/Programming_style">estilos de programación</a>, y algunos argumentarían que el suyo es el mejor para usar, pero la verdad es que casi cualquier estilo está bien siempre y cuando se sea <strong>consistente </strong>al usarlo y sea <em>claro </em>y <em>obvio </em>lo que es y hace cada cosa.</p>
    <p class="dropspot"><img>La imagen de arriba es un ejemplo de una declaración de función en un <span class="notranslate">script</span> para ilustrar los puntos anteriores. Puedes ver que utiliza los comentarios de estilo JSDoc para explicar claramente lo que hace todo, y el estilo de codificación es consistente, con sangrías de 4 espacios, guiones bajos utilizados para vars locales, salida registrada, etc...</p>
    <p class="dropspot">También tenga en cuenta que mientras el editor <span class="notranslate">script</span> le permite doblar el código en cada uno de los corchetes de apertura/cierre, puede utilizar las etiquetas <span class="inline">#region</span> y <span class="inline">#endregion</span> para seccionar partes de su código y mejorar enormemente la legibilidad, especialmente cuando se trata de un <span class="notranslate">scripts</span> más grande que contiene múltiples funciones. Las regiones también pueden ser comentadas - vea la sección de Edición de esta página en el manual):</p>
    <p class="dropspot"><img>Al escribir el código, debe tener en cuenta que al compilar su juego final, <span data-keyref="GameMaker Name">GameMaker</span> elimina los comentarios, los saltos de línea y los espacios en blanco innecesarios, sustituye los valores constantes/macro/enuméricos y, en general, comprime su código como parte del proceso. Esto significa que usted puede añadir tanto espacio en blanco alrededor de su código como sea necesario y no tiene que preocuparse de mantener sus comentarios cortos o sólo utilizarlos con moderación.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Uso de variables locales</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Siguiendo con el punto anterior sobre el estilo de programación, una cosa que hacen muchos principiantes es meter todo lo posible en una línea de código. Por ejemplo:</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">Si bien no es completamente ilegible, es ineficiente (la función <span class="inline">point_direction()</span> se llama dos veces, por ejemplo) y es desordenada e incómoda de ver. Estaría mucho mejor expresado como:</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">La memoria y los recursos necesarios para crear esas variables locales son insignificantes, y se compensan con creces por el beneficio instantáneo que tú (o cualquier otra persona que lea el código más tarde) obtiene de su claridad. La misma idea debería aplicarse también a las funciones, donde deberías asignar nombres sensatos a las variables de entrada, y utilizar un formato claro y variables locales cuando sea necesario para hacerlo lo más legible posible.</p>
    <p class="dropspot">Las variables locales son rápidas de procesar en el juego, así que aprovéchalas al máximo, y si una expresión aparece en un bloque de código o en <span class="notranslate">script</span> dos o más veces, piensa en crear una variable local para ella. Cuando utilices los objetivos <a class="glossterm" data-glossterm="Compilador YoYo (YYC)" href="#">del Compilador YoYo (YYC</a> ), si haces referencia a <span class="inline">global</span> o a variables de instancia varias veces en una función o bloque de código, es especialmente beneficioso asignarlas a una variable local al principio de tu código y luego referenciar esa variable local, ya que esto dará un rendimiento mucho mayor.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Arrays</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Overview/Arrays.htm">Las mat</a> rices son rápidas de usar y requieren menos memoria que las estructuras de datos, pero pueden optimizarse aún más. Cuando creas un array, la memoria se asigna en función de su tamaño, por lo que deberías intentar inicializar un array a su tamaño máximo primero, incluso si no planeas llenarlo hasta más adelante. Por ejemplo, si sabes que necesitas que un array contenga un máximo de 100 valores, deberías inicializarlo a 100 ranuras directamente, usando la función <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> función:</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">Esto asigna la memoria para ello en un &quot;trozo&quot; con todos los valores de la matriz que se establecen en el valor predeterminado de 0 y ayuda a mantener las cosas rápidas, ya que de lo contrario cada vez que se agrega un nuevo valor a la matriz toda la memoria tiene que ser reasignada de nuevo.</p>
    <p class="note">¡<span class="note">NOTA</span> En el objetivo HTML5 la asignación de arrays así no se aplica y tus arrays deben ser inicializados desde 0 para este objetivo! Puedes manejar esto fácilmente comprobando la variable os_browser, por ejemplo:</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">También puedes liberar la memoria asociada a un array estableciendo la variable utilizada como 0. Así, para borrar el array del ejemplo de código anterior, simplemente usarías</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">También hay que tener en cuenta que los arrays se pasan <strong>por</strong> referencia, pero se copiará todo cuando se haga un cambio (este comportamiento se llama <strong>copy on write</strong>). Así, si pasas un array a una función, estás pasando una <em>referencia </em>al array original y cualquier valor que se lea de él vendrá de la fuente original. Esto es bueno y rápido, pero si necesitas modificar alguno de los valores del array, el propio array se duplica en el momento de la escritura y cualquier cambio realizado <strong>debe ser devuelto desde la función o se perderá</strong>. Esto es mucho más lento y consume más memoria, así que ten cuidado con el uso de arrays en funciones.</p>
    <p class="dropspot">Sin embargo, se puede evitar este comportamiento de copia en escritura utilizando el <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accesorio</a> especial para matrices <span class="inline">@</span>, ya que esto da acceso directo a la matriz subyacente. Por ejemplo:</p>
    <p class="code">// Call a function, passing our array<br />
      my_function(my_array);</p>
    <p class="code">// The function looks like this:<br />
      <br />
      function my_function(_a)<br />
      {<br />
          // The array will be copied and the copy modified,<br />
          // requiring you to use &quot;return _a&quot;, later<br />
          _a[0] = 100;<br />
      <br />
          // This will modify the ORIGINAL array directly and<br />
          // does not require it to be returned<br />
          _a[@ 0] = 100;<br />
      }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Estructuras de datos</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">En <span data-keyref="GameMaker Name">GameMaker</span> <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">las estructuras de datos</a> han sido optimizadas para ser mucho más rápidas que las versiones anteriores de <span class="notranslate">GameMaker</span>. Siguen necesitando ser limpiadas (destruidas) cuando no se usan para liberar memoria, y pueden seguir siendo más lentas que, por ejemplo, las matrices, pero la facilidad de uso y las funciones adicionales para tratar los datos que contienen pueden compensar a menudo la mínima diferencia de velocidad, así que no tengas miedo de usarlas en tus juegos.</p>
    <p class="dropspot">Cabe destacar que de todos los <span class="notranslate">data structures</span>, los Mapas DS en particular son rapidísimos, tanto para leer como para escribir, lo que los convierte en una excelente opción para todo tipo de tareas.</p>
    <p class="dropspot">Anteriormente mencionamos <a href="../GameMaker_Language/GML_Overview/Accessors.htm">los accesores</a> para arrays, pero también están disponibles para <span class="notranslate">data structures</span>, lo que puede ayudar a limpiar tu código y hacerlo mucho más fácil de leer.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Colisiones</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Hay <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">múltiples maneras de tratar las colisiones</a> en <span data-keyref="GameMaker Name">GameMaker</span>, y la mayoría de ellas vienen con un poco de sobrecarga adicional de la CPU. Las funciones <span class="inline">collision_</span> y <span class="inline">point_</span>, <span class="inline">place_</span> y <span class="inline">instance_</span> se basan en la comprobación de <a class="glossterm" data-glossterm="cuadro delimitador" href="#">los límites de las cajas</a> con todas las instancias de un tipo determinado dentro de <span class="notranslate">room</span>, y aunque hay alguna optimización integrada en el motor para limitar estas comprobaciones, las colisiones nunca son lo más eficiente. Si empiezas a usar colisiones precisas, el rendimiento también empeorará notablemente, ya que no sólo estarás haciendo comprobaciones de caja delimitadora, sino que también estarás haciendo comprobaciones por píxel, lo cual es muy lento.</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">Esto no quiere decir que no debas utilizar estas funciones, ya que pueden ser muy útiles. Sin embargo, debes saber cuáles usar y cuándo, ya que todas funcionan de forma ligeramente diferente y tendrán distintas velocidades. La regla general es que las funciones <span class="inline">place_</span> son más rápidas que las funciones <span class="inline">instance_</span>, que son más rápidas que las funciones <span class="inline">collision_</span> y <span class="inline">point_</span>, así que lee las páginas del manual de cada uno de estos tipos de funciones y asegúrate de elegir la más adecuada para cada situación.</p>
    <p class="dropspot">Alternativamente, mira a crear un<strong> sistema de colisión basado en azulejos</strong>, que puede ser creado usando las <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">funciones de mapa de azulejos</a> o incluso un array 2D personalizado o una rejilla DS. Estos serán muy rápidos y ayudarán a aumentar la velocidad de tu juego. Sin embargo, si estás usando un terreno irregular o paredes y <span class="notranslate">objects</span> que no se alinean con una cuadrícula, pueden no ser apropiados. Puedes encontrar un tutorial muy sencillo sobre colisiones de tilesmap en el siguiente enlace de vídeo</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Colisiones de baldosas en <span data-keyref="GameMaker Name">GameMaker</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Intercambio de texturas y lotes de vértices</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Si usted <span class="notranslate">switch</span> en el <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>superposición de la depuración</strong></a>verás que hay dos cifras entre paréntesis en la parte superior de la pantalla al hacer la prueba. La primera es el número de <strong>intercambios de texturas </strong>que se realizan y la segunda es el número de <strong>lotes de vértices</strong>. Hay una serie de factores que influyen en estas cifras y nunca las bajarás a (0) (0) ya que el motor requiere uno o dos de cada paso, pero deberías intentar bajar estos valores lo máximo posible.</p>
    <p class="dropspot"><img>Para los intercambios de texturas, la mejor y más eficiente manera de hacer esto es optimizar cómo se almacenan tus <span class="notranslate">sprites</span> y fondos en la página de texturas. Esto se hace desde las <a href="../The_Asset_Editors/Sprites.htm">propiedades del sprite</a>, y puedes crear páginas de texturas en el <a href="../Settings/Texture_Groups.htm">Editor de Grupos de Texturas</a>. Si tienes una serie de imágenes que sólo se utilizan en el menú principal (por ejemplo), entonces ponlas juntas en una página de <a href="../Settings/Texture_Information/Texture_Pages.htm">textura</a> separada. Lo mismo si tienes imágenes específicas de un nivel, o del jugador y los enemigos, etc. Básicamente, quieres agruparlas por uso para que los intercambios se reduzcan al máximo. Además, para ayudar a mantener la <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a> optimizada, puedes utilizar las diferentes funciones de <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">prefetch y flush</a> para cargar y eliminar texturas de la memoria según sea necesario.</p>
    <p class="note"><span class="note">NOTA</span> Como se mencionó al principio de esta página, si tu juego se ejecuta bien con un FPS decente, entonces no te preocupes demasiado por los intercambios de texturas... especialmente al crear proyectos en los objetivos de escritorio. Estas optimizaciones son mejores cuando se usan con juegos grandes o en dispositivos móviles de gama baja, y cuando se usan de forma incorrecta pueden afectar negativamente al rendimiento.</p>
    <p class="dropspot">La información de los vértices se envía en &quot;lotes&quot; a la GPU para el dibujo y, en general, cuanto más grande sea el lote, mejor. Por lo tanto, se debe evitar &quot;romper&quot; el lote al dibujar, ya que esto aumentará el número de lotes de vértices enviados a la GPU. Hay una serie de cosas que romperán el lote, siendo las principales los <strong>modos de mezcla</strong>, cambiar el <strong>sombreador</strong>, cambiar un uniforme por un <span class="notranslate">shader</span> antes de dibujar algo, y dibujar usando las formas y primitivas incorporadas.</p>
    <p class="dropspot">Por lo tanto, si tienes un número de instancias de balas que dibujan usando el modo de mezcla <span class="inline">bm_add</span> - por ejemplo - estarás creando un nuevo <span class="notranslate">vertex batch</span> para cada una, ¡lo cual es definitivamente algo malo! En su lugar, tenga un controlador <span class="notranslate">object</span> en su juego que dibuje todas las balas en su lugar, así:</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">NOTA</span> Esto no sólo se aplica al uso de <span class="inline" style="font-size: 14px">bm_add</span> - cualquier cambio de mezcla romperá el lote y dará un golpe de rendimiento.</p>
    <p class="dropspot">De este modo, todas las viñetas se dibujarán en el mismo lote. El uso juicioso de las funciones <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>, y <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a> puede mejorar en gran medida el rendimiento y pueden activarse/desactivarse según sea necesario en el código de su proyecto, aunque pueden no ser apropiadas para todos los tipos de gráficos o proyectos.</p>
    <p class="note"><span class="note">NOTA</span> Si no necesitas que la instancia se dibuje a sí misma cuando usas un controlador de esta manera, entonces puedes simplemente añadir un comentario en el Evento de Dibujo para suprimir el dibujo por defecto, o hacer la instancia invisible (aunque esto evitará que todo el código se ejecute para la instancia en todos los eventos de dibujo).</p>
    <p class="dropspot">Otra forma de reducir estos números es desactivar la opción de <strong>Página de Textura Separada</strong> para <span class="notranslate">sprites</span> a menos que sea absolutamente necesario. Cada imagen almacenada de esta manera se envía a su propia página de textura y se agrupa de manera diferente, por lo que tener estas imágenes en una página de textura regular es mejor. A continuación, puede obtener las coordenadas UVS utilizando la función <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> y almacenarlas en variables para su uso posterior. Puede ser una pequeña cantidad de código extra, pero el impulso que obtendrá vale la pena. Tenga en cuenta que este método no permite la repetición de texturas.</p>
    <p class="dropspot">Como con todos estos consejos, si te complica la vida cambiarlo y tu juego funciona bien, no te preocupes demasiado...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Partículas</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">Las partículas</a> ofrecen una forma muy rápida y eficaz de crear efectos dinámicos en tu juego, y en general ofrecen un buen rendimiento. Sin embargo, hay que tener en cuenta que el uso de la mezcla aditiva, la mezcla alfa y la mezcla de colores en las partículas puede reducir ese rendimiento, especialmente en los objetivos móviles, así que si no lo necesitas no lo uses. La mezcla aditiva, en particular, puede aumentar mucho los lotes de vértices y debe utilizarse con cuidado.</p>
    <p class="dropspot">Ten en cuenta que en el objetivo HTML5 que no es WebGL, tener partículas multicolores y que se desvanecen requerirá una gran cantidad de caché de imágenes y será muy lento. Sin embargo, dado que la partícula <span class="notranslate">sprites</span> puede ser animada, puedes crear un <span class="notranslate">sprite</span> animado que tenga sub-imágenes que cambien de color y luego usar eso para la partícula en su lugar. Seguirá pareciendo un cambio de color gradual, pero no requerirá la creación constante de imágenes <span class="notranslate">cache</span>.</p>
    <p class="dropspot">Puede encontrar más información sobre las partículas en la página <a href="Guide_To_Using_Particles.htm">Guía de uso de las partículas</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Superficies</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Por último, vamos a hablar brevemente del uso de <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">las superficies</a>, ya que <span data-keyref="GameMaker Name">GameMaker</span> cuenta con una optimización bastante importante a la hora de utilizarlas en tus juegos: la posibilidad de activar y desactivar el <strong>buffer de</strong> profundidad en <span class="notranslate">switch</span>.</p>
    <p class="dropspot">Cuando sólo se utilizan las superficies de forma normal, <span data-keyref="GameMaker Name">GameMaker</span> creará una superficie y una profundidad adjunta <span class="notranslate">buffer</span> para asegurar la correcta clasificación de la profundidad al dibujar cualquier cosa en 3D. Sin embargo, para la mayoría de los juegos 2D, esta profundidad extra <span class="notranslate">buffer</span> no es necesaria y por lo tanto está ocupando espacio de memoria adicional y tiempo de procesamiento que podría ser utilizado para otras cosas. Aquí es donde la función <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> entra en juego...</p>
    <p class="dropspot">Esta función puede ser llamada antes de crear una superficie para desactivar la generación de profundidad <span class="notranslate">buffer</span>, y todas las superficies creadas después no tendrán una profundidad <span class="notranslate">buffer</span> creada para ellas. Puedes activar/desactivar esta función según lo necesites, e incluso puedes llamarla una vez al inicio del juego para desactivar la profundidad <span class="notranslate">buffers</span> para todas las llamadas de superficie posteriores (y en la mayoría de los juegos 2D esto está bien). No va a dar un gran aumento de rendimiento, pero es ciertamente algo a tener en cuenta si tu juego depende en gran medida de las superficies y podría evitar que tu juego se quede sin memoria en los dispositivos de menor especificación.</p>
  </div>
  <p> </p>
  <p>Aparte de las cosas principales mencionadas anteriormente, hay otras cosas más generales que pueden ayudar al rendimiento y que también se consideran &quot;buenas prácticas&quot;:</p>
  <ul class="colour">
    <li>no tengas miedo de utilizar las funciones trigonométricas, ya que (en contra de la creencia popular) son bastante rápidas, especialmente cuando se comparan con las partículas, las colisiones, <span class="notranslate">strings</span>, etc.</li>
    <li>no pongas código que no sea para dibujar cosas en los eventos Draw</li>
    <li>utilizar una alarma para llamar a cualquier código que no tenga que ser llamado en cada paso (en lugar de añadir esto en el evento Paso de todos modos)</li>
  </ul>
  <p>Pero, como mencionamos al principio de la página, todas estas optimizaciones son opcionales y si tu juego funciona bien con 60 lotes de vértices, 80 intercambios de texturas, mezcla aditiva, etc., ¡no te preocupes demasiado! Sólo ten en cuenta estas cosas cuando programes tu próximo juego...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Additional_Information.htm">Información adicional</a></div>
        <div style="float:right">Siguiente: <a href="The_File_System.htm">El sistema de archivos</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>