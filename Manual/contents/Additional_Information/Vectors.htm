<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Vectores</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how vectors work" />
  <meta name="rh-index-keywords" content="Vectors" />
  <meta name="search-keywords" content="Vectors,vector maths" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Vectores</h1>
  <p>En algún momento, al crear un juego de cualquier complejidad, probablemente tendrás que lidiar con <strong>vectores</strong>. Se utilizan en física, en IA, en trigonometría y en muchas otras situaciones, pero ¿qué es un vector? Bueno, para decirlo de forma sencilla, un vector es una <em>cantidad dirigida</em>. Empecemos por ver un vector de una dimensión -que es lo mismo que un solo número- dibujando una línea numerada con una flecha que empiece en el cero y termine en el 5. Este es el vector &quot;a&quot; que es igual a 5 y si dibujamos otra flecha que empiece en el 5 y termine en el 8 tenemos el vector &quot;b&quot; que es igual a 3:</p>
  <p><img>Deberías darte cuenta de que no importa dónde empieza un vector, lo único que importa es su longitud y la dirección en la que va. Así, el vector &quot;b&quot; empieza en 5, tiene 3 unidades de longitud y apunta a la &quot;derecha&quot;, por lo que es idéntico a un vector que empieza en 0 y va hasta 3. Ahora, también puedes sumar estos vectores, poniendo los dos vectores &quot;a&quot; y &quot;b&quot; uno al lado del otro para obtener el vector &quot;c&quot;, que es igual a 8. ¿Qué pasa con los números negativos? Pues bien, si en la imagen anterior un vector que apunta a la &quot;derecha&quot; corresponde a un número positivo, puedes ver que un vector que apunta a la &quot;izquierda&quot; correspondería a un número negativo, lo que hace que un vector unidimensional no sea más que un número con signo (+/-). Esto explica el concepto esencial de un vector: sólo cuentan la <em>longitud</em> y la <em>dirección</em> (&quot;izquierda&quot; o &quot;derecha&quot; en este caso), no la posición.</p>
  <p>¿Y qué pasa con los vectores bidimensionales? Bien, podemos pensar en ellos como si estuvieran formados no sólo por &quot;izquierda&quot; y &quot;derecha&quot;, sino también por &quot;arriba&quot; y &quot;abajo&quot;:</p>
  <p><img>Ahora bien, estos vectores no son todavía vectores, ya que tenemos que reducirlos utilizando sus coordenadas iniciales y finales. Mirando el vector &quot;a&quot; podemos ver que tiene una coordenada inicial de [2,2] y una coordenada final de [4,3] y por lo tanto para obtener el vector de esto tenemos que reducirlo restando las coordenadas finales de las coordenadas iniciales así:</p>
  <p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p>
  <p>Hagamos ahora lo mismo con el vector b:</p>
  <p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p>
  <p>¿Notas algo? ¡Esos dos vectores son iguales! Esta es otra demostración de que un vector no tiene posición, sólo dirección y longitud, y que podemos dibujar esos vectores uno respecto del otro alrededor de un eje local [0,0]:</p>
  <p><img>Esto significa que un vector 2D está definido por dos valores, una posición &quot;x&quot; y una posición &quot;y&quot; respecto al eje local [0,0]. ¿Y qué pasa con los vectores 3D? Bueno, tienen la dimensión añadida de la &quot;profundidad&quot; y se calculan como posiciones &quot;x&quot;, &quot;y&quot; y &quot;z&quot; alrededor de un eje local, algo así:</p>
  <p><img>Un buen ejemplo de un vector utilizado en <span data-keyref="GameMaker Name">GameMaker</span> es la propiedad física <strong>de la gravedad</strong> en el editor <span class="notranslate">room</span>. La gravedad se calcula como un vector alrededor de una posición [0,0]. Así, si usted define la gravedad como [x0, y10], la gravedad sería <em>hacia abajo</em> con una fuerza de 10.</p>
  <p>Normalmente, los vectores se pueden utilizar en muchas situaciones, pero a veces se quiere restringir su valor (como cuando se trata de ángulos), por lo que los <strong>normalizamos </strong>. Se trata esencialmente de un truco matemático que se utiliza para convertir un vector de longitud <em>n</em> en un vector de longitud 1, lo que significa que los componentes del vector se <em>normalizan </em>para estar entre 0 y 1. Estos vectores también se llaman <strong>vectores unitarios</strong>:</p>
  <p><img>Para calcular un vector normalizado, primero debemos tener las componentes del vector original, y luego utilizarlas para obtener la longitud del vector. A continuación, dividimos cada una de las componentes del vector por esta longitud para obtener las componentes del vector normalizado que forman el vector normalizado en el que la <strong>suma de los cuadrados de todas las coordenadas es igual a 1</strong>. He aquí cómo:</p>
  <p><img>Primero tomamos las coordenadas del vector y obtenemos las componentes:</p>
  <p class="code">vx = (x2 - x1) = (7 - 1) = 6<br />
    vy = (y2 - y1) = (4 - 1) = 3</p>
  <p>A continuación, utilizamos estos valores para calcular la longitud del vector:</p>
  <p class="code">len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369</p>
  <p>Ahora, eso nos da la longitud exacta del vector &quot;a&quot;, así que vamos a utilizarlo para normalizar los dos componentes del vector <span class="inline">vx</span> y <span class="inline">vy</span>:</p>
  <p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br />
    vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p>
  <p>Genial. Ya hemos normalizado las componentes del vector. Pero, ¿qué utilidad práctica tiene eso en el contexto de <span data-keyref="GameMaker Name">GameMaker</span>? Bien, pongamos un ejemplo práctico...</p>
  <p>Digamos que tienes un juego en el que el jugador tiene que disparar a un enemigo y necesitas saber cuánto tiene que moverse la bala <span class="notranslate">object</span> a lo largo del eje x e y en cada paso para darle:</p>
  <p><img>Para ello, utilizarías las coordenadas del jugador y del enemigo para obtener los componentes del vector y la longitud, luego los normalizarías para obtener un valor entre 0 y 1 que finalmente multiplicarías por la velocidad a la que deseas que viaje la bala en cada paso. Estos dos valores finales se almacenan y se añaden a las coordenadas X e Y iniciales en cada paso. ¿Suena complicado? No lo es, mira (los valores se han redondeado a un decimal para simplificar):</p>
  <p class="code">px = 100;<br />
    py = 425;<br />
    ex = 356;<br />
    ey = 83;<br />
    bullet_speed = 5;<br />
    <br />
    vx = (ex - px); // = 256<br />
    vy = (ey - py); // = -342<br />
    <br />
    len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2<br />
    <br />
    vx = vx / len; // = 0.6<br />
    vy = vy / len; // = 0.8<br />
    <br />
    speed_x = vx * bullet_speed; // = 3<br />
    speed_y = vy * bullet_speed; // = 4
  </p>
  <p>Por lo tanto, para dar con el objetivo necesitamos sumar 3 a la coordenada x de la bala y 4 a su coordenada y en cada paso.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Additional_Information.htm">Información adicional</a></div>
        <div style="float:right">Siguiente: <a href="Guide_To_Using_Buffers.htm">Guía para el uso de buffers</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>